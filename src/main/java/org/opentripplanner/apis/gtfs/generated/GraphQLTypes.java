// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
package org.opentripplanner.apis.gtfs.generated;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class GraphQLTypes {

  /** The cardinal (compass) direction taken when engaging a walking/driving step. */
  public enum GraphQLAbsoluteDirection {
    EAST,
    NORTH,
    NORTHEAST,
    NORTHWEST,
    SOUTH,
    SOUTHEAST,
    SOUTHWEST,
    WEST,
  }

  public static class GraphQLAgencyAlertsArgs {

    private List<GraphQLAgencyAlertType> types;

    public GraphQLAgencyAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("types") != null) {
          this.types =
            ((List<Object>) args.get("types")).stream()
              .map(item ->
                item instanceof GraphQLAgencyAlertType
                  ? item
                  : GraphQLAgencyAlertType.valueOf((String) item)
              )
              .map(GraphQLAgencyAlertType.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public List<GraphQLAgencyAlertType> getGraphQLTypes() {
      return this.types;
    }

    public void setGraphQLTypes(List<GraphQLAgencyAlertType> types) {
      this.types = types;
    }
  }

  /** Entities, which are relevant for an agency and can contain alerts */
  public enum GraphQLAgencyAlertType {
    AGENCY,
    ROUTES,
    ROUTE_TYPES,
  }

  /** Cause of a alert */
  public enum GraphQLAlertCauseType {
    ACCIDENT,
    CONSTRUCTION,
    DEMONSTRATION,
    HOLIDAY,
    MAINTENANCE,
    MEDICAL_EMERGENCY,
    OTHER_CAUSE,
    POLICE_ACTIVITY,
    STRIKE,
    TECHNICAL_PROBLEM,
    UNKNOWN_CAUSE,
    WEATHER,
  }

  /** Effect of a alert */
  public enum GraphQLAlertEffectType {
    ACCESSIBILITY_ISSUE,
    ADDITIONAL_SERVICE,
    DETOUR,
    MODIFIED_SERVICE,
    NO_EFFECT,
    NO_SERVICE,
    OTHER_EFFECT,
    REDUCED_SERVICE,
    SIGNIFICANT_DELAYS,
    STOP_MOVED,
    UNKNOWN_EFFECT,
  }

  /** Severity level of a alert */
  public enum GraphQLAlertSeverityLevelType {
    INFO,
    SEVERE,
    UNKNOWN_SEVERITY,
    WARNING,
  }

  public static class GraphQLBikeParkNameArgs {

    private String language;

    public GraphQLBikeParkNameArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getGraphQLLanguage() {
      return this.language;
    }

    public void setGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  public enum GraphQLBikesAllowed {
    ALLOWED,
    NOT_ALLOWED,
    NO_INFORMATION,
  }

  public static class GraphQLCarParkNameArgs {

    private String language;

    public GraphQLCarParkNameArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getGraphQLLanguage() {
      return this.language;
    }

    public void setGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  public static class GraphQLDepartureRowStoptimesArgs {

    private Integer numberOfDepartures;
    private Boolean omitCanceled;
    private Boolean omitNonPickups;
    private Long startTime;
    private Integer timeRange;

    public GraphQLDepartureRowStoptimesArgs(Map<String, Object> args) {
      if (args != null) {
        this.numberOfDepartures = (Integer) args.get("numberOfDepartures");
        this.omitCanceled = (Boolean) args.get("omitCanceled");
        this.omitNonPickups = (Boolean) args.get("omitNonPickups");
        this.startTime = (Long) args.get("startTime");
        this.timeRange = (Integer) args.get("timeRange");
      }
    }

    public Integer getGraphQLNumberOfDepartures() {
      return this.numberOfDepartures;
    }

    public Boolean getGraphQLOmitCanceled() {
      return this.omitCanceled;
    }

    public Boolean getGraphQLOmitNonPickups() {
      return this.omitNonPickups;
    }

    public Long getGraphQLStartTime() {
      return this.startTime;
    }

    public Integer getGraphQLTimeRange() {
      return this.timeRange;
    }

    public void setGraphQLNumberOfDepartures(Integer numberOfDepartures) {
      this.numberOfDepartures = numberOfDepartures;
    }

    public void setGraphQLOmitCanceled(Boolean omitCanceled) {
      this.omitCanceled = omitCanceled;
    }

    public void setGraphQLOmitNonPickups(Boolean omitNonPickups) {
      this.omitNonPickups = omitNonPickups;
    }

    public void setGraphQLStartTime(Long startTime) {
      this.startTime = startTime;
    }

    public void setGraphQLTimeRange(Integer timeRange) {
      this.timeRange = timeRange;
    }
  }

  public static class GraphQLFeedAlertsArgs {

    private List<GraphQLFeedAlertType> types;

    public GraphQLFeedAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("types") != null) {
          this.types =
            ((List<Object>) args.get("types")).stream()
              .map(item ->
                item instanceof GraphQLFeedAlertType
                  ? item
                  : GraphQLFeedAlertType.valueOf((String) item)
              )
              .map(GraphQLFeedAlertType.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public List<GraphQLFeedAlertType> getGraphQLTypes() {
      return this.types;
    }

    public void setGraphQLTypes(List<GraphQLFeedAlertType> types) {
      this.types = types;
    }
  }

  /** Entities, which are relevant for a feed and can contain alerts */
  public enum GraphQLFeedAlertType {
    AGENCIES,
    ROUTE_TYPES,
  }

  public enum GraphQLFilterPlaceType {
    BICYCLE_RENT,
    BIKE_PARK,
    CAR_PARK,
    DEPARTURE_ROW,
    STATION,
    STOP,
    VEHICLE_RENT,
  }

  public enum GraphQLFormFactor {
    BICYCLE,
    CAR,
    CARGO_BICYCLE,
    MOPED,
    OTHER,
    SCOOTER,
    SCOOTER_SEATED,
    SCOOTER_STANDING,
  }

  public static class GraphQLInputBannedInput {

    private String agencies;
    private String routes;
    private String stops;
    private String stopsHard;
    private String trips;

    public GraphQLInputBannedInput(Map<String, Object> args) {
      if (args != null) {
        this.agencies = (String) args.get("agencies");
        this.routes = (String) args.get("routes");
        this.stops = (String) args.get("stops");
        this.stopsHard = (String) args.get("stopsHard");
        this.trips = (String) args.get("trips");
      }
    }

    public String getGraphQLAgencies() {
      return this.agencies;
    }

    public String getGraphQLRoutes() {
      return this.routes;
    }

    public String getGraphQLStops() {
      return this.stops;
    }

    public String getGraphQLStopsHard() {
      return this.stopsHard;
    }

    public String getGraphQLTrips() {
      return this.trips;
    }

    public void setGraphQLAgencies(String agencies) {
      this.agencies = agencies;
    }

    public void setGraphQLRoutes(String routes) {
      this.routes = routes;
    }

    public void setGraphQLStops(String stops) {
      this.stops = stops;
    }

    public void setGraphQLStopsHard(String stopsHard) {
      this.stopsHard = stopsHard;
    }

    public void setGraphQLTrips(String trips) {
      this.trips = trips;
    }
  }

  public static class GraphQLInputCoordinatesInput {

    private String address;
    private Double lat;
    private Integer locationSlack;
    private Double lon;

    public GraphQLInputCoordinatesInput(Map<String, Object> args) {
      if (args != null) {
        this.address = (String) args.get("address");
        this.lat = (Double) args.get("lat");
        this.locationSlack = (Integer) args.get("locationSlack");
        this.lon = (Double) args.get("lon");
      }
    }

    public String getGraphQLAddress() {
      return this.address;
    }

    public Double getGraphQLLat() {
      return this.lat;
    }

    public Integer getGraphQLLocationSlack() {
      return this.locationSlack;
    }

    public Double getGraphQLLon() {
      return this.lon;
    }

    public void setGraphQLAddress(String address) {
      this.address = address;
    }

    public void setGraphQLLat(Double lat) {
      this.lat = lat;
    }

    public void setGraphQLLocationSlack(Integer locationSlack) {
      this.locationSlack = locationSlack;
    }

    public void setGraphQLLon(Double lon) {
      this.lon = lon;
    }
  }

  public enum GraphQLInputField {
    DATE_TIME,
    FROM,
    TO,
  }

  public static class GraphQLInputFiltersInput {

    private List<String> bikeParks;
    private List<String> bikeRentalStations;
    private List<String> carParks;
    private List<String> routes;
    private List<String> stations;
    private List<String> stops;

    public GraphQLInputFiltersInput(Map<String, Object> args) {
      if (args != null) {
        this.bikeParks = (List<String>) args.get("bikeParks");
        this.bikeRentalStations = (List<String>) args.get("bikeRentalStations");
        this.carParks = (List<String>) args.get("carParks");
        this.routes = (List<String>) args.get("routes");
        this.stations = (List<String>) args.get("stations");
        this.stops = (List<String>) args.get("stops");
      }
    }

    public List<String> getGraphQLBikeParks() {
      return this.bikeParks;
    }

    public List<String> getGraphQLBikeRentalStations() {
      return this.bikeRentalStations;
    }

    public List<String> getGraphQLCarParks() {
      return this.carParks;
    }

    public List<String> getGraphQLRoutes() {
      return this.routes;
    }

    public List<String> getGraphQLStations() {
      return this.stations;
    }

    public List<String> getGraphQLStops() {
      return this.stops;
    }

    public void setGraphQLBikeParks(List<String> bikeParks) {
      this.bikeParks = bikeParks;
    }

    public void setGraphQLBikeRentalStations(List<String> bikeRentalStations) {
      this.bikeRentalStations = bikeRentalStations;
    }

    public void setGraphQLCarParks(List<String> carParks) {
      this.carParks = carParks;
    }

    public void setGraphQLRoutes(List<String> routes) {
      this.routes = routes;
    }

    public void setGraphQLStations(List<String> stations) {
      this.stations = stations;
    }

    public void setGraphQLStops(List<String> stops) {
      this.stops = stops;
    }
  }

  public static class GraphQLInputModeWeightInput {

    private Double AIRPLANE;
    private Double BUS;
    private Double CABLE_CAR;
    private Double FERRY;
    private Double FUNICULAR;
    private Double GONDOLA;
    private Double RAIL;
    private Double SUBWAY;
    private Double TRAM;

    public GraphQLInputModeWeightInput(Map<String, Object> args) {
      if (args != null) {
        this.AIRPLANE = (Double) args.get("AIRPLANE");
        this.BUS = (Double) args.get("BUS");
        this.CABLE_CAR = (Double) args.get("CABLE_CAR");
        this.FERRY = (Double) args.get("FERRY");
        this.FUNICULAR = (Double) args.get("FUNICULAR");
        this.GONDOLA = (Double) args.get("GONDOLA");
        this.RAIL = (Double) args.get("RAIL");
        this.SUBWAY = (Double) args.get("SUBWAY");
        this.TRAM = (Double) args.get("TRAM");
      }
    }

    public Double getGraphQLAirplane() {
      return this.AIRPLANE;
    }

    public Double getGraphQLBus() {
      return this.BUS;
    }

    public Double getGraphQLCable_Car() {
      return this.CABLE_CAR;
    }

    public Double getGraphQLFerry() {
      return this.FERRY;
    }

    public Double getGraphQLFunicular() {
      return this.FUNICULAR;
    }

    public Double getGraphQLGondola() {
      return this.GONDOLA;
    }

    public Double getGraphQLRail() {
      return this.RAIL;
    }

    public Double getGraphQLSubway() {
      return this.SUBWAY;
    }

    public Double getGraphQLTram() {
      return this.TRAM;
    }

    public void setGraphQLAirplane(Double AIRPLANE) {
      this.AIRPLANE = AIRPLANE;
    }

    public void setGraphQLBus(Double BUS) {
      this.BUS = BUS;
    }

    public void setGraphQLCable_Car(Double CABLE_CAR) {
      this.CABLE_CAR = CABLE_CAR;
    }

    public void setGraphQLFerry(Double FERRY) {
      this.FERRY = FERRY;
    }

    public void setGraphQLFunicular(Double FUNICULAR) {
      this.FUNICULAR = FUNICULAR;
    }

    public void setGraphQLGondola(Double GONDOLA) {
      this.GONDOLA = GONDOLA;
    }

    public void setGraphQLRail(Double RAIL) {
      this.RAIL = RAIL;
    }

    public void setGraphQLSubway(Double SUBWAY) {
      this.SUBWAY = SUBWAY;
    }

    public void setGraphQLTram(Double TRAM) {
      this.TRAM = TRAM;
    }
  }

  public static class GraphQLInputPreferredInput {

    private String agencies;
    private Integer otherThanPreferredRoutesPenalty;
    private String routes;

    public GraphQLInputPreferredInput(Map<String, Object> args) {
      if (args != null) {
        this.agencies = (String) args.get("agencies");
        this.otherThanPreferredRoutesPenalty =
          (Integer) args.get("otherThanPreferredRoutesPenalty");
        this.routes = (String) args.get("routes");
      }
    }

    public String getGraphQLAgencies() {
      return this.agencies;
    }

    public Integer getGraphQLOtherThanPreferredRoutesPenalty() {
      return this.otherThanPreferredRoutesPenalty;
    }

    public String getGraphQLRoutes() {
      return this.routes;
    }

    public void setGraphQLAgencies(String agencies) {
      this.agencies = agencies;
    }

    public void setGraphQLOtherThanPreferredRoutesPenalty(Integer otherThanPreferredRoutesPenalty) {
      this.otherThanPreferredRoutesPenalty = otherThanPreferredRoutesPenalty;
    }

    public void setGraphQLRoutes(String routes) {
      this.routes = routes;
    }
  }

  public static class GraphQLInputTriangleInput {

    private Double safetyFactor;
    private Double slopeFactor;
    private Double timeFactor;

    public GraphQLInputTriangleInput(Map<String, Object> args) {
      if (args != null) {
        this.safetyFactor = (Double) args.get("safetyFactor");
        this.slopeFactor = (Double) args.get("slopeFactor");
        this.timeFactor = (Double) args.get("timeFactor");
      }
    }

    public Double getGraphQLSafetyFactor() {
      return this.safetyFactor;
    }

    public Double getGraphQLSlopeFactor() {
      return this.slopeFactor;
    }

    public Double getGraphQLTimeFactor() {
      return this.timeFactor;
    }

    public void setGraphQLSafetyFactor(Double safetyFactor) {
      this.safetyFactor = safetyFactor;
    }

    public void setGraphQLSlopeFactor(Double slopeFactor) {
      this.slopeFactor = slopeFactor;
    }

    public void setGraphQLTimeFactor(Double timeFactor) {
      this.timeFactor = timeFactor;
    }
  }

  public static class GraphQLInputUnpreferredInput {

    private String agencies;
    private String routes;
    private String unpreferredCost;
    private Integer useUnpreferredRoutesPenalty;

    public GraphQLInputUnpreferredInput(Map<String, Object> args) {
      if (args != null) {
        this.agencies = (String) args.get("agencies");
        this.routes = (String) args.get("routes");
        this.unpreferredCost = (String) args.get("unpreferredCost");
        this.useUnpreferredRoutesPenalty = (Integer) args.get("useUnpreferredRoutesPenalty");
      }
    }

    public String getGraphQLAgencies() {
      return this.agencies;
    }

    public String getGraphQLRoutes() {
      return this.routes;
    }

    public String getGraphQLUnpreferredCost() {
      return this.unpreferredCost;
    }

    public Integer getGraphQLUseUnpreferredRoutesPenalty() {
      return this.useUnpreferredRoutesPenalty;
    }

    public void setGraphQLAgencies(String agencies) {
      this.agencies = agencies;
    }

    public void setGraphQLRoutes(String routes) {
      this.routes = routes;
    }

    public void setGraphQLUnpreferredCost(String unpreferredCost) {
      this.unpreferredCost = unpreferredCost;
    }

    public void setGraphQLUseUnpreferredRoutesPenalty(Integer useUnpreferredRoutesPenalty) {
      this.useUnpreferredRoutesPenalty = useUnpreferredRoutesPenalty;
    }
  }

  public static class GraphQLLegNextLegsArgs {

    private List<GraphQLTransitMode> destinationModesWithParentStation;
    private Integer numberOfLegs;
    private List<GraphQLTransitMode> originModesWithParentStation;

    public GraphQLLegNextLegsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("destinationModesWithParentStation") != null) {
          this.destinationModesWithParentStation =
            ((List<Object>) args.get("destinationModesWithParentStation")).stream()
              .map(item ->
                item instanceof GraphQLTransitMode
                  ? item
                  : GraphQLTransitMode.valueOf((String) item)
              )
              .map(GraphQLTransitMode.class::cast)
              .collect(Collectors.toList());
        }
        this.numberOfLegs = (Integer) args.get("numberOfLegs");
        if (args.get("originModesWithParentStation") != null) {
          this.originModesWithParentStation =
            ((List<Object>) args.get("originModesWithParentStation")).stream()
              .map(item ->
                item instanceof GraphQLTransitMode
                  ? item
                  : GraphQLTransitMode.valueOf((String) item)
              )
              .map(GraphQLTransitMode.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public List<GraphQLTransitMode> getGraphQLDestinationModesWithParentStation() {
      return this.destinationModesWithParentStation;
    }

    public Integer getGraphQLNumberOfLegs() {
      return this.numberOfLegs;
    }

    public List<GraphQLTransitMode> getGraphQLOriginModesWithParentStation() {
      return this.originModesWithParentStation;
    }

    public void setGraphQLDestinationModesWithParentStation(
      List<GraphQLTransitMode> destinationModesWithParentStation
    ) {
      this.destinationModesWithParentStation = destinationModesWithParentStation;
    }

    public void setGraphQLNumberOfLegs(Integer numberOfLegs) {
      this.numberOfLegs = numberOfLegs;
    }

    public void setGraphQLOriginModesWithParentStation(
      List<GraphQLTransitMode> originModesWithParentStation
    ) {
      this.originModesWithParentStation = originModesWithParentStation;
    }
  }

  /** Identifies whether this stop represents a stop or station. */
  public enum GraphQLLocationType {
    ENTRANCE,
    STATION,
    STOP,
  }

  public enum GraphQLMode {
    AIRPLANE,
    BICYCLE,
    BUS,
    CABLE_CAR,
    CAR,
    CARPOOL,
    COACH,
    FERRY,
    FLEX,
    FLEXIBLE,
    FUNICULAR,
    GONDOLA,
    LEG_SWITCH,
    MONORAIL,
    RAIL,
    SCOOTER,
    SUBWAY,
    TAXI,
    TRAM,
    TRANSIT,
    TROLLEYBUS,
    WALK,
  }

  /** Occupancy status of a vehicle. */
  public enum GraphQLOccupancyStatus {
    CRUSHED_STANDING_ROOM_ONLY,
    EMPTY,
    FEW_SEATS_AVAILABLE,
    FULL,
    MANY_SEATS_AVAILABLE,
    NOT_ACCEPTING_PASSENGERS,
    NO_DATA_AVAILABLE,
    STANDING_ROOM_ONLY,
  }

  public static class GraphQLOpeningHoursDatesArgs {

    private List<String> dates;

    public GraphQLOpeningHoursDatesArgs(Map<String, Object> args) {
      if (args != null) {
        this.dates = (List<String>) args.get("dates");
      }
    }

    public List<String> getGraphQLDates() {
      return this.dates;
    }

    public void setGraphQLDates(List<String> dates) {
      this.dates = dates;
    }
  }

  /** Optimization type for bicycling legs */
  public enum GraphQLOptimizeType {
    FLAT,
    GREENWAYS,
    QUICK,
    SAFE,
    TRIANGLE,
  }

  public static class GraphQLParkingFilterInput {

    private List<GraphQLParkingFilterOperationInput> not;
    private List<GraphQLParkingFilterOperationInput> select;

    public GraphQLParkingFilterInput(Map<String, Object> args) {
      if (args != null) {
        if (args.get("not") != null) {
          this.not = (List<GraphQLParkingFilterOperationInput>) args.get("not");
        }
        if (args.get("select") != null) {
          this.select = (List<GraphQLParkingFilterOperationInput>) args.get("select");
        }
      }
    }

    public List<GraphQLParkingFilterOperationInput> getGraphQLNot() {
      return this.not;
    }

    public List<GraphQLParkingFilterOperationInput> getGraphQLSelect() {
      return this.select;
    }

    public void setGraphQLNot(List<GraphQLParkingFilterOperationInput> not) {
      this.not = not;
    }

    public void setGraphQLSelect(List<GraphQLParkingFilterOperationInput> select) {
      this.select = select;
    }
  }

  public static class GraphQLParkingFilterOperationInput {

    private List<String> tags;

    public GraphQLParkingFilterOperationInput(Map<String, Object> args) {
      if (args != null) {
        this.tags = (List<String>) args.get("tags");
      }
    }

    public List<String> getGraphQLTags() {
      return this.tags;
    }

    public void setGraphQLTags(List<String> tags) {
      this.tags = tags;
    }
  }

  public static class GraphQLPatternAlertsArgs {

    private List<GraphQLPatternAlertType> types;

    public GraphQLPatternAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("types") != null) {
          this.types =
            ((List<Object>) args.get("types")).stream()
              .map(item ->
                item instanceof GraphQLPatternAlertType
                  ? item
                  : GraphQLPatternAlertType.valueOf((String) item)
              )
              .map(GraphQLPatternAlertType.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public List<GraphQLPatternAlertType> getGraphQLTypes() {
      return this.types;
    }

    public void setGraphQLTypes(List<GraphQLPatternAlertType> types) {
      this.types = types;
    }
  }

  public static class GraphQLPatternTripsForDateArgs {

    private String serviceDate;

    public GraphQLPatternTripsForDateArgs(Map<String, Object> args) {
      if (args != null) {
        this.serviceDate = (String) args.get("serviceDate");
      }
    }

    public String getGraphQLServiceDate() {
      return this.serviceDate;
    }

    public void setGraphQLServiceDate(String serviceDate) {
      this.serviceDate = serviceDate;
    }
  }

  /** Entities, which are relevant for a pattern and can contain alerts */
  public enum GraphQLPatternAlertType {
    AGENCY,
    PATTERN,
    ROUTE,
    ROUTE_TYPE,
    STOPS_ON_PATTERN,
    STOPS_ON_TRIPS,
    TRIPS,
  }

  public enum GraphQLPickupDropoffType {
    CALL_AGENCY,
    COORDINATE_WITH_DRIVER,
    NONE,
    SCHEDULED,
  }

  public enum GraphQLPropulsionType {
    COMBUSTION,
    COMBUSTION_DIESEL,
    ELECTRIC,
    ELECTRIC_ASSIST,
    HUMAN,
    HYBRID,
    HYDROGEN_FUEL_CELL,
    PLUG_IN_HYBRID,
  }

  /**
   * Additional qualifier for a transport mode.
   * Note that qualifiers can only be used with certain transport modes.
   */
  public enum GraphQLQualifier {
    ACCESS,
    DIRECT,
    DROPOFF,
    EGRESS,
    HAIL,
    HAVE,
    KEEP,
    PARK,
    PICKUP,
    RENT,
  }

  public static class GraphQLQueryTypeAgencyArgs {

    private String id;

    public GraphQLQueryTypeAgencyArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypeAlertsArgs {

    private List<GraphQLAlertCauseType> cause;
    private List<GraphQLAlertEffectType> effect;
    private List<String> feeds;
    private List<String> route;
    private List<GraphQLAlertSeverityLevelType> severityLevel;
    private List<String> stop;

    public GraphQLQueryTypeAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("cause") != null) {
          this.cause =
            ((List<Object>) args.get("cause")).stream()
              .map(item ->
                item instanceof GraphQLAlertCauseType
                  ? item
                  : GraphQLAlertCauseType.valueOf((String) item)
              )
              .map(GraphQLAlertCauseType.class::cast)
              .collect(Collectors.toList());
        }
        if (args.get("effect") != null) {
          this.effect =
            ((List<Object>) args.get("effect")).stream()
              .map(item ->
                item instanceof GraphQLAlertEffectType
                  ? item
                  : GraphQLAlertEffectType.valueOf((String) item)
              )
              .map(GraphQLAlertEffectType.class::cast)
              .collect(Collectors.toList());
        }
        this.feeds = (List<String>) args.get("feeds");
        this.route = (List<String>) args.get("route");
        if (args.get("severityLevel") != null) {
          this.severityLevel =
            ((List<Object>) args.get("severityLevel")).stream()
              .map(item ->
                item instanceof GraphQLAlertSeverityLevelType
                  ? item
                  : GraphQLAlertSeverityLevelType.valueOf((String) item)
              )
              .map(GraphQLAlertSeverityLevelType.class::cast)
              .collect(Collectors.toList());
        }
        this.stop = (List<String>) args.get("stop");
      }
    }

    public List<GraphQLAlertCauseType> getGraphQLCause() {
      return this.cause;
    }

    public List<GraphQLAlertEffectType> getGraphQLEffect() {
      return this.effect;
    }

    public List<String> getGraphQLFeeds() {
      return this.feeds;
    }

    public List<String> getGraphQLRoute() {
      return this.route;
    }

    public List<GraphQLAlertSeverityLevelType> getGraphQLSeverityLevel() {
      return this.severityLevel;
    }

    public List<String> getGraphQLStop() {
      return this.stop;
    }

    public void setGraphQLCause(List<GraphQLAlertCauseType> cause) {
      this.cause = cause;
    }

    public void setGraphQLEffect(List<GraphQLAlertEffectType> effect) {
      this.effect = effect;
    }

    public void setGraphQLFeeds(List<String> feeds) {
      this.feeds = feeds;
    }

    public void setGraphQLRoute(List<String> route) {
      this.route = route;
    }

    public void setGraphQLSeverityLevel(List<GraphQLAlertSeverityLevelType> severityLevel) {
      this.severityLevel = severityLevel;
    }

    public void setGraphQLStop(List<String> stop) {
      this.stop = stop;
    }
  }

  public static class GraphQLQueryTypeBikeParkArgs {

    private String id;

    public GraphQLQueryTypeBikeParkArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypeBikeRentalStationArgs {

    private String id;

    public GraphQLQueryTypeBikeRentalStationArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypeBikeRentalStationsArgs {

    private List<String> ids;

    public GraphQLQueryTypeBikeRentalStationsArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (List<String>) args.get("ids");
      }
    }

    public List<String> getGraphQLIds() {
      return this.ids;
    }

    public void setGraphQLIds(List<String> ids) {
      this.ids = ids;
    }
  }

  public static class GraphQLQueryTypeCancelledTripTimesArgs {

    private List<String> feeds;
    private Integer maxArrivalTime;
    private String maxDate;
    private Integer maxDepartureTime;
    private Integer minArrivalTime;
    private String minDate;
    private Integer minDepartureTime;
    private List<String> patterns;
    private List<String> routes;
    private List<String> trips;

    public GraphQLQueryTypeCancelledTripTimesArgs(Map<String, Object> args) {
      if (args != null) {
        this.feeds = (List<String>) args.get("feeds");
        this.maxArrivalTime = (Integer) args.get("maxArrivalTime");
        this.maxDate = (String) args.get("maxDate");
        this.maxDepartureTime = (Integer) args.get("maxDepartureTime");
        this.minArrivalTime = (Integer) args.get("minArrivalTime");
        this.minDate = (String) args.get("minDate");
        this.minDepartureTime = (Integer) args.get("minDepartureTime");
        this.patterns = (List<String>) args.get("patterns");
        this.routes = (List<String>) args.get("routes");
        this.trips = (List<String>) args.get("trips");
      }
    }

    public List<String> getGraphQLFeeds() {
      return this.feeds;
    }

    public Integer getGraphQLMaxArrivalTime() {
      return this.maxArrivalTime;
    }

    public String getGraphQLMaxDate() {
      return this.maxDate;
    }

    public Integer getGraphQLMaxDepartureTime() {
      return this.maxDepartureTime;
    }

    public Integer getGraphQLMinArrivalTime() {
      return this.minArrivalTime;
    }

    public String getGraphQLMinDate() {
      return this.minDate;
    }

    public Integer getGraphQLMinDepartureTime() {
      return this.minDepartureTime;
    }

    public List<String> getGraphQLPatterns() {
      return this.patterns;
    }

    public List<String> getGraphQLRoutes() {
      return this.routes;
    }

    public List<String> getGraphQLTrips() {
      return this.trips;
    }

    public void setGraphQLFeeds(List<String> feeds) {
      this.feeds = feeds;
    }

    public void setGraphQLMaxArrivalTime(Integer maxArrivalTime) {
      this.maxArrivalTime = maxArrivalTime;
    }

    public void setGraphQLMaxDate(String maxDate) {
      this.maxDate = maxDate;
    }

    public void setGraphQLMaxDepartureTime(Integer maxDepartureTime) {
      this.maxDepartureTime = maxDepartureTime;
    }

    public void setGraphQLMinArrivalTime(Integer minArrivalTime) {
      this.minArrivalTime = minArrivalTime;
    }

    public void setGraphQLMinDate(String minDate) {
      this.minDate = minDate;
    }

    public void setGraphQLMinDepartureTime(Integer minDepartureTime) {
      this.minDepartureTime = minDepartureTime;
    }

    public void setGraphQLPatterns(List<String> patterns) {
      this.patterns = patterns;
    }

    public void setGraphQLRoutes(List<String> routes) {
      this.routes = routes;
    }

    public void setGraphQLTrips(List<String> trips) {
      this.trips = trips;
    }
  }

  public static class GraphQLQueryTypeCarParkArgs {

    private String id;

    public GraphQLQueryTypeCarParkArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypeCarParksArgs {

    private List<String> ids;

    public GraphQLQueryTypeCarParksArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (List<String>) args.get("ids");
      }
    }

    public List<String> getGraphQLIds() {
      return this.ids;
    }

    public void setGraphQLIds(List<String> ids) {
      this.ids = ids;
    }
  }

  public static class GraphQLQueryTypeClusterArgs {

    private String id;

    public GraphQLQueryTypeClusterArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypeDepartureRowArgs {

    private String id;

    public GraphQLQueryTypeDepartureRowArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypeFuzzyTripArgs {

    private String date;
    private Integer direction;
    private String route;
    private Integer time;

    public GraphQLQueryTypeFuzzyTripArgs(Map<String, Object> args) {
      if (args != null) {
        this.date = (String) args.get("date");
        this.direction = (Integer) args.get("direction");
        this.route = (String) args.get("route");
        this.time = (Integer) args.get("time");
      }
    }

    public String getGraphQLDate() {
      return this.date;
    }

    public Integer getGraphQLDirection() {
      return this.direction;
    }

    public String getGraphQLRoute() {
      return this.route;
    }

    public Integer getGraphQLTime() {
      return this.time;
    }

    public void setGraphQLDate(String date) {
      this.date = date;
    }

    public void setGraphQLDirection(Integer direction) {
      this.direction = direction;
    }

    public void setGraphQLRoute(String route) {
      this.route = route;
    }

    public void setGraphQLTime(Integer time) {
      this.time = time;
    }
  }

  public static class GraphQLQueryTypeNearestArgs {

    private String after;
    private String before;
    private GraphQLInputFiltersInput filterByIds;
    private List<GraphQLMode> filterByModes;
    private List<GraphQLFilterPlaceType> filterByPlaceTypes;
    private Integer first;
    private Integer last;
    private Double lat;
    private Double lon;
    private Integer maxDistance;
    private Integer maxResults;

    public GraphQLQueryTypeNearestArgs(Map<String, Object> args) {
      if (args != null) {
        this.after = (String) args.get("after");
        this.before = (String) args.get("before");
        this.filterByIds =
          new GraphQLInputFiltersInput((Map<String, Object>) args.get("filterByIds"));
        if (args.get("filterByModes") != null) {
          this.filterByModes =
            ((List<Object>) args.get("filterByModes")).stream()
              .map(item -> item instanceof GraphQLMode ? item : GraphQLMode.valueOf((String) item))
              .map(GraphQLMode.class::cast)
              .collect(Collectors.toList());
        }
        if (args.get("filterByPlaceTypes") != null) {
          this.filterByPlaceTypes =
            ((List<Object>) args.get("filterByPlaceTypes")).stream()
              .map(item ->
                item instanceof GraphQLFilterPlaceType
                  ? item
                  : GraphQLFilterPlaceType.valueOf((String) item)
              )
              .map(GraphQLFilterPlaceType.class::cast)
              .collect(Collectors.toList());
        }
        this.first = (Integer) args.get("first");
        this.last = (Integer) args.get("last");
        this.lat = (Double) args.get("lat");
        this.lon = (Double) args.get("lon");
        this.maxDistance = (Integer) args.get("maxDistance");
        this.maxResults = (Integer) args.get("maxResults");
      }
    }

    public String getGraphQLAfter() {
      return this.after;
    }

    public String getGraphQLBefore() {
      return this.before;
    }

    public GraphQLInputFiltersInput getGraphQLFilterByIds() {
      return this.filterByIds;
    }

    public List<GraphQLMode> getGraphQLFilterByModes() {
      return this.filterByModes;
    }

    public List<GraphQLFilterPlaceType> getGraphQLFilterByPlaceTypes() {
      return this.filterByPlaceTypes;
    }

    public Integer getGraphQLFirst() {
      return this.first;
    }

    public Integer getGraphQLLast() {
      return this.last;
    }

    public Double getGraphQLLat() {
      return this.lat;
    }

    public Double getGraphQLLon() {
      return this.lon;
    }

    public Integer getGraphQLMaxDistance() {
      return this.maxDistance;
    }

    public Integer getGraphQLMaxResults() {
      return this.maxResults;
    }

    public void setGraphQLAfter(String after) {
      this.after = after;
    }

    public void setGraphQLBefore(String before) {
      this.before = before;
    }

    public void setGraphQLFilterByIds(GraphQLInputFiltersInput filterByIds) {
      this.filterByIds = filterByIds;
    }

    public void setGraphQLFilterByModes(List<GraphQLMode> filterByModes) {
      this.filterByModes = filterByModes;
    }

    public void setGraphQLFilterByPlaceTypes(List<GraphQLFilterPlaceType> filterByPlaceTypes) {
      this.filterByPlaceTypes = filterByPlaceTypes;
    }

    public void setGraphQLFirst(Integer first) {
      this.first = first;
    }

    public void setGraphQLLast(Integer last) {
      this.last = last;
    }

    public void setGraphQLLat(Double lat) {
      this.lat = lat;
    }

    public void setGraphQLLon(Double lon) {
      this.lon = lon;
    }

    public void setGraphQLMaxDistance(Integer maxDistance) {
      this.maxDistance = maxDistance;
    }

    public void setGraphQLMaxResults(Integer maxResults) {
      this.maxResults = maxResults;
    }
  }

  public static class GraphQLQueryTypeNodeArgs {

    private graphql.relay.Relay.ResolvedGlobalId id;

    public GraphQLQueryTypeNodeArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (graphql.relay.Relay.ResolvedGlobalId) args.get("id");
      }
    }

    public graphql.relay.Relay.ResolvedGlobalId getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(graphql.relay.Relay.ResolvedGlobalId id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypePatternArgs {

    private String id;

    public GraphQLQueryTypePatternArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypePlanArgs {

    private Integer alightSlack;
    private Boolean allowBikeRental;
    private Boolean allowKeepingRentedBicycleAtDestination;
    private List<String> allowedBikeRentalNetworks;
    private List<String> allowedTicketTypes;
    private List<String> allowedVehicleRentalNetworks;
    private Boolean arriveBy;
    private GraphQLInputBannedInput banned;
    private List<String> bannedVehicleRentalNetworks;
    private Boolean batch;
    private Integer bikeBoardCost;
    private Double bikeReluctance;
    private Double bikeSpeed;
    private Integer bikeSwitchCost;
    private Integer bikeSwitchTime;
    private Double bikeWalkingReluctance;
    private Integer boardSlack;
    private Double carParkCarLegWeight;
    private Double carReluctance;
    private Long claimInitialWait;
    private Boolean compactLegsByReversedSearch;
    private String date;
    private Boolean debugItineraryFilter;
    private Boolean disableRemainingWeightHeuristic;
    private GraphQLInputCoordinatesInput from;
    private String fromPlace;
    private Integer heuristicStepsPerMainStep;
    private Boolean ignoreRealtimeUpdates;
    private List<GraphQLInputCoordinatesInput> intermediatePlaces;
    private Double itineraryFiltering;
    private Integer keepingRentedBicycleAtDestinationCost;
    private String locale;
    private Integer maxPreTransitTime;
    private Integer maxTransfers;
    private Double maxWalkDistance;
    private Integer minTransferTime;
    private GraphQLInputModeWeightInput modeWeight;
    private Integer nonpreferredTransferPenalty;
    private Integer numItineraries;
    private Boolean omitCanceled;
    private GraphQLOptimizeType optimize;
    private String pageCursor;
    private GraphQLVehicleParkingInput parking;
    private GraphQLInputPreferredInput preferred;
    private Boolean reverseOptimizeOnTheFly;
    private Long searchWindow;
    private String startTransitStopId;
    private String startTransitTripId;
    private String time;
    private GraphQLInputCoordinatesInput to;
    private String toPlace;
    private Integer transferPenalty;
    private List<GraphQLTransportModeInput> transportModes;
    private GraphQLInputTriangleInput triangle;
    private GraphQLInputUnpreferredInput unpreferred;
    private Double waitAtBeginningFactor;
    private Double waitReluctance;
    private Integer walkBoardCost;
    private Double walkOnStreetReluctance;
    private Double walkReluctance;
    private Double walkSafetyFactor;
    private Double walkSpeed;
    private Boolean wheelchair;

    public GraphQLQueryTypePlanArgs(Map<String, Object> args) {
      if (args != null) {
        this.alightSlack = (Integer) args.get("alightSlack");
        this.allowBikeRental = (Boolean) args.get("allowBikeRental");
        this.allowKeepingRentedBicycleAtDestination =
          (Boolean) args.get("allowKeepingRentedBicycleAtDestination");
        this.allowedBikeRentalNetworks = (List<String>) args.get("allowedBikeRentalNetworks");
        this.allowedTicketTypes = (List<String>) args.get("allowedTicketTypes");
        this.allowedVehicleRentalNetworks = (List<String>) args.get("allowedVehicleRentalNetworks");
        this.arriveBy = (Boolean) args.get("arriveBy");
        this.banned = new GraphQLInputBannedInput((Map<String, Object>) args.get("banned"));
        this.bannedVehicleRentalNetworks = (List<String>) args.get("bannedVehicleRentalNetworks");
        this.batch = (Boolean) args.get("batch");
        this.bikeBoardCost = (Integer) args.get("bikeBoardCost");
        this.bikeReluctance = (Double) args.get("bikeReluctance");
        this.bikeSpeed = (Double) args.get("bikeSpeed");
        this.bikeSwitchCost = (Integer) args.get("bikeSwitchCost");
        this.bikeSwitchTime = (Integer) args.get("bikeSwitchTime");
        this.bikeWalkingReluctance = (Double) args.get("bikeWalkingReluctance");
        this.boardSlack = (Integer) args.get("boardSlack");
        this.carParkCarLegWeight = (Double) args.get("carParkCarLegWeight");
        this.carReluctance = (Double) args.get("carReluctance");
        this.claimInitialWait = (Long) args.get("claimInitialWait");
        this.compactLegsByReversedSearch = (Boolean) args.get("compactLegsByReversedSearch");
        this.date = (String) args.get("date");
        this.debugItineraryFilter = (Boolean) args.get("debugItineraryFilter");
        this.disableRemainingWeightHeuristic =
          (Boolean) args.get("disableRemainingWeightHeuristic");
        this.from = new GraphQLInputCoordinatesInput((Map<String, Object>) args.get("from"));
        this.fromPlace = (String) args.get("fromPlace");
        this.heuristicStepsPerMainStep = (Integer) args.get("heuristicStepsPerMainStep");
        this.ignoreRealtimeUpdates = (Boolean) args.get("ignoreRealtimeUpdates");
        if (args.get("intermediatePlaces") != null) {
          this.intermediatePlaces =
            (List<GraphQLInputCoordinatesInput>) args.get("intermediatePlaces");
        }
        this.itineraryFiltering = (Double) args.get("itineraryFiltering");
        this.keepingRentedBicycleAtDestinationCost =
          (Integer) args.get("keepingRentedBicycleAtDestinationCost");
        this.locale = (String) args.get("locale");
        this.maxPreTransitTime = (Integer) args.get("maxPreTransitTime");
        this.maxTransfers = (Integer) args.get("maxTransfers");
        this.maxWalkDistance = (Double) args.get("maxWalkDistance");
        this.minTransferTime = (Integer) args.get("minTransferTime");
        this.modeWeight =
          new GraphQLInputModeWeightInput((Map<String, Object>) args.get("modeWeight"));
        this.nonpreferredTransferPenalty = (Integer) args.get("nonpreferredTransferPenalty");
        this.numItineraries = (Integer) args.get("numItineraries");
        this.omitCanceled = (Boolean) args.get("omitCanceled");
        if (args.get("optimize") instanceof GraphQLOptimizeType) {
          this.optimize = (GraphQLOptimizeType) args.get("optimize");
        } else {
          this.optimize = GraphQLOptimizeType.valueOf((String) args.get("optimize"));
        }
        this.pageCursor = (String) args.get("pageCursor");
        this.parking = new GraphQLVehicleParkingInput((Map<String, Object>) args.get("parking"));
        this.preferred =
          new GraphQLInputPreferredInput((Map<String, Object>) args.get("preferred"));
        this.reverseOptimizeOnTheFly = (Boolean) args.get("reverseOptimizeOnTheFly");
        this.searchWindow = (Long) args.get("searchWindow");
        this.startTransitStopId = (String) args.get("startTransitStopId");
        this.startTransitTripId = (String) args.get("startTransitTripId");
        this.time = (String) args.get("time");
        this.to = new GraphQLInputCoordinatesInput((Map<String, Object>) args.get("to"));
        this.toPlace = (String) args.get("toPlace");
        this.transferPenalty = (Integer) args.get("transferPenalty");
        if (args.get("transportModes") != null) {
          this.transportModes = (List<GraphQLTransportModeInput>) args.get("transportModes");
        }
        this.triangle = new GraphQLInputTriangleInput((Map<String, Object>) args.get("triangle"));
        this.unpreferred =
          new GraphQLInputUnpreferredInput((Map<String, Object>) args.get("unpreferred"));
        this.waitAtBeginningFactor = (Double) args.get("waitAtBeginningFactor");
        this.waitReluctance = (Double) args.get("waitReluctance");
        this.walkBoardCost = (Integer) args.get("walkBoardCost");
        this.walkOnStreetReluctance = (Double) args.get("walkOnStreetReluctance");
        this.walkReluctance = (Double) args.get("walkReluctance");
        this.walkSafetyFactor = (Double) args.get("walkSafetyFactor");
        this.walkSpeed = (Double) args.get("walkSpeed");
        this.wheelchair = (Boolean) args.get("wheelchair");
      }
    }

    public Integer getGraphQLAlightSlack() {
      return this.alightSlack;
    }

    public Boolean getGraphQLAllowBikeRental() {
      return this.allowBikeRental;
    }

    public Boolean getGraphQLAllowKeepingRentedBicycleAtDestination() {
      return this.allowKeepingRentedBicycleAtDestination;
    }

    public List<String> getGraphQLAllowedBikeRentalNetworks() {
      return this.allowedBikeRentalNetworks;
    }

    public List<String> getGraphQLAllowedTicketTypes() {
      return this.allowedTicketTypes;
    }

    public List<String> getGraphQLAllowedVehicleRentalNetworks() {
      return this.allowedVehicleRentalNetworks;
    }

    public Boolean getGraphQLArriveBy() {
      return this.arriveBy;
    }

    public GraphQLInputBannedInput getGraphQLBanned() {
      return this.banned;
    }

    public List<String> getGraphQLBannedVehicleRentalNetworks() {
      return this.bannedVehicleRentalNetworks;
    }

    public Boolean getGraphQLBatch() {
      return this.batch;
    }

    public Integer getGraphQLBikeBoardCost() {
      return this.bikeBoardCost;
    }

    public Double getGraphQLBikeReluctance() {
      return this.bikeReluctance;
    }

    public Double getGraphQLBikeSpeed() {
      return this.bikeSpeed;
    }

    public Integer getGraphQLBikeSwitchCost() {
      return this.bikeSwitchCost;
    }

    public Integer getGraphQLBikeSwitchTime() {
      return this.bikeSwitchTime;
    }

    public Double getGraphQLBikeWalkingReluctance() {
      return this.bikeWalkingReluctance;
    }

    public Integer getGraphQLBoardSlack() {
      return this.boardSlack;
    }

    public Double getGraphQLCarParkCarLegWeight() {
      return this.carParkCarLegWeight;
    }

    public Double getGraphQLCarReluctance() {
      return this.carReluctance;
    }

    public Long getGraphQLClaimInitialWait() {
      return this.claimInitialWait;
    }

    public Boolean getGraphQLCompactLegsByReversedSearch() {
      return this.compactLegsByReversedSearch;
    }

    public String getGraphQLDate() {
      return this.date;
    }

    public Boolean getGraphQLDebugItineraryFilter() {
      return this.debugItineraryFilter;
    }

    public Boolean getGraphQLDisableRemainingWeightHeuristic() {
      return this.disableRemainingWeightHeuristic;
    }

    public GraphQLInputCoordinatesInput getGraphQLFrom() {
      return this.from;
    }

    public String getGraphQLFromPlace() {
      return this.fromPlace;
    }

    public Integer getGraphQLHeuristicStepsPerMainStep() {
      return this.heuristicStepsPerMainStep;
    }

    public Boolean getGraphQLIgnoreRealtimeUpdates() {
      return this.ignoreRealtimeUpdates;
    }

    public List<GraphQLInputCoordinatesInput> getGraphQLIntermediatePlaces() {
      return this.intermediatePlaces;
    }

    public Double getGraphQLItineraryFiltering() {
      return this.itineraryFiltering;
    }

    public Integer getGraphQLKeepingRentedBicycleAtDestinationCost() {
      return this.keepingRentedBicycleAtDestinationCost;
    }

    public String getGraphQLLocale() {
      return this.locale;
    }

    public Integer getGraphQLMaxPreTransitTime() {
      return this.maxPreTransitTime;
    }

    public Integer getGraphQLMaxTransfers() {
      return this.maxTransfers;
    }

    public Double getGraphQLMaxWalkDistance() {
      return this.maxWalkDistance;
    }

    public Integer getGraphQLMinTransferTime() {
      return this.minTransferTime;
    }

    public GraphQLInputModeWeightInput getGraphQLModeWeight() {
      return this.modeWeight;
    }

    public Integer getGraphQLNonpreferredTransferPenalty() {
      return this.nonpreferredTransferPenalty;
    }

    public Integer getGraphQLNumItineraries() {
      return this.numItineraries;
    }

    public Boolean getGraphQLOmitCanceled() {
      return this.omitCanceled;
    }

    public GraphQLOptimizeType getGraphQLOptimize() {
      return this.optimize;
    }

    public String getGraphQLPageCursor() {
      return this.pageCursor;
    }

    public GraphQLVehicleParkingInput getGraphQLParking() {
      return this.parking;
    }

    public GraphQLInputPreferredInput getGraphQLPreferred() {
      return this.preferred;
    }

    public Boolean getGraphQLReverseOptimizeOnTheFly() {
      return this.reverseOptimizeOnTheFly;
    }

    public Long getGraphQLSearchWindow() {
      return this.searchWindow;
    }

    public String getGraphQLStartTransitStopId() {
      return this.startTransitStopId;
    }

    public String getGraphQLStartTransitTripId() {
      return this.startTransitTripId;
    }

    public String getGraphQLTime() {
      return this.time;
    }

    public GraphQLInputCoordinatesInput getGraphQLTo() {
      return this.to;
    }

    public String getGraphQLToPlace() {
      return this.toPlace;
    }

    public Integer getGraphQLTransferPenalty() {
      return this.transferPenalty;
    }

    public List<GraphQLTransportModeInput> getGraphQLTransportModes() {
      return this.transportModes;
    }

    public GraphQLInputTriangleInput getGraphQLTriangle() {
      return this.triangle;
    }

    public GraphQLInputUnpreferredInput getGraphQLUnpreferred() {
      return this.unpreferred;
    }

    public Double getGraphQLWaitAtBeginningFactor() {
      return this.waitAtBeginningFactor;
    }

    public Double getGraphQLWaitReluctance() {
      return this.waitReluctance;
    }

    public Integer getGraphQLWalkBoardCost() {
      return this.walkBoardCost;
    }

    public Double getGraphQLWalkOnStreetReluctance() {
      return this.walkOnStreetReluctance;
    }

    public Double getGraphQLWalkReluctance() {
      return this.walkReluctance;
    }

    public Double getGraphQLWalkSafetyFactor() {
      return this.walkSafetyFactor;
    }

    public Double getGraphQLWalkSpeed() {
      return this.walkSpeed;
    }

    public Boolean getGraphQLWheelchair() {
      return this.wheelchair;
    }

    public void setGraphQLAlightSlack(Integer alightSlack) {
      this.alightSlack = alightSlack;
    }

    public void setGraphQLAllowBikeRental(Boolean allowBikeRental) {
      this.allowBikeRental = allowBikeRental;
    }

    public void setGraphQLAllowKeepingRentedBicycleAtDestination(
      Boolean allowKeepingRentedBicycleAtDestination
    ) {
      this.allowKeepingRentedBicycleAtDestination = allowKeepingRentedBicycleAtDestination;
    }

    public void setGraphQLAllowedBikeRentalNetworks(List<String> allowedBikeRentalNetworks) {
      this.allowedBikeRentalNetworks = allowedBikeRentalNetworks;
    }

    public void setGraphQLAllowedTicketTypes(List<String> allowedTicketTypes) {
      this.allowedTicketTypes = allowedTicketTypes;
    }

    public void setGraphQLAllowedVehicleRentalNetworks(List<String> allowedVehicleRentalNetworks) {
      this.allowedVehicleRentalNetworks = allowedVehicleRentalNetworks;
    }

    public void setGraphQLArriveBy(Boolean arriveBy) {
      this.arriveBy = arriveBy;
    }

    public void setGraphQLBanned(GraphQLInputBannedInput banned) {
      this.banned = banned;
    }

    public void setGraphQLBannedVehicleRentalNetworks(List<String> bannedVehicleRentalNetworks) {
      this.bannedVehicleRentalNetworks = bannedVehicleRentalNetworks;
    }

    public void setGraphQLBatch(Boolean batch) {
      this.batch = batch;
    }

    public void setGraphQLBikeBoardCost(Integer bikeBoardCost) {
      this.bikeBoardCost = bikeBoardCost;
    }

    public void setGraphQLBikeReluctance(Double bikeReluctance) {
      this.bikeReluctance = bikeReluctance;
    }

    public void setGraphQLBikeSpeed(Double bikeSpeed) {
      this.bikeSpeed = bikeSpeed;
    }

    public void setGraphQLBikeSwitchCost(Integer bikeSwitchCost) {
      this.bikeSwitchCost = bikeSwitchCost;
    }

    public void setGraphQLBikeSwitchTime(Integer bikeSwitchTime) {
      this.bikeSwitchTime = bikeSwitchTime;
    }

    public void setGraphQLBikeWalkingReluctance(Double bikeWalkingReluctance) {
      this.bikeWalkingReluctance = bikeWalkingReluctance;
    }

    public void setGraphQLBoardSlack(Integer boardSlack) {
      this.boardSlack = boardSlack;
    }

    public void setGraphQLCarParkCarLegWeight(Double carParkCarLegWeight) {
      this.carParkCarLegWeight = carParkCarLegWeight;
    }

    public void setGraphQLCarReluctance(Double carReluctance) {
      this.carReluctance = carReluctance;
    }

    public void setGraphQLClaimInitialWait(Long claimInitialWait) {
      this.claimInitialWait = claimInitialWait;
    }

    public void setGraphQLCompactLegsByReversedSearch(Boolean compactLegsByReversedSearch) {
      this.compactLegsByReversedSearch = compactLegsByReversedSearch;
    }

    public void setGraphQLDate(String date) {
      this.date = date;
    }

    public void setGraphQLDebugItineraryFilter(Boolean debugItineraryFilter) {
      this.debugItineraryFilter = debugItineraryFilter;
    }

    public void setGraphQLDisableRemainingWeightHeuristic(Boolean disableRemainingWeightHeuristic) {
      this.disableRemainingWeightHeuristic = disableRemainingWeightHeuristic;
    }

    public void setGraphQLFrom(GraphQLInputCoordinatesInput from) {
      this.from = from;
    }

    public void setGraphQLFromPlace(String fromPlace) {
      this.fromPlace = fromPlace;
    }

    public void setGraphQLHeuristicStepsPerMainStep(Integer heuristicStepsPerMainStep) {
      this.heuristicStepsPerMainStep = heuristicStepsPerMainStep;
    }

    public void setGraphQLIgnoreRealtimeUpdates(Boolean ignoreRealtimeUpdates) {
      this.ignoreRealtimeUpdates = ignoreRealtimeUpdates;
    }

    public void setGraphQLIntermediatePlaces(
      List<GraphQLInputCoordinatesInput> intermediatePlaces
    ) {
      this.intermediatePlaces = intermediatePlaces;
    }

    public void setGraphQLItineraryFiltering(Double itineraryFiltering) {
      this.itineraryFiltering = itineraryFiltering;
    }

    public void setGraphQLKeepingRentedBicycleAtDestinationCost(
      Integer keepingRentedBicycleAtDestinationCost
    ) {
      this.keepingRentedBicycleAtDestinationCost = keepingRentedBicycleAtDestinationCost;
    }

    public void setGraphQLLocale(String locale) {
      this.locale = locale;
    }

    public void setGraphQLMaxPreTransitTime(Integer maxPreTransitTime) {
      this.maxPreTransitTime = maxPreTransitTime;
    }

    public void setGraphQLMaxTransfers(Integer maxTransfers) {
      this.maxTransfers = maxTransfers;
    }

    public void setGraphQLMaxWalkDistance(Double maxWalkDistance) {
      this.maxWalkDistance = maxWalkDistance;
    }

    public void setGraphQLMinTransferTime(Integer minTransferTime) {
      this.minTransferTime = minTransferTime;
    }

    public void setGraphQLModeWeight(GraphQLInputModeWeightInput modeWeight) {
      this.modeWeight = modeWeight;
    }

    public void setGraphQLNonpreferredTransferPenalty(Integer nonpreferredTransferPenalty) {
      this.nonpreferredTransferPenalty = nonpreferredTransferPenalty;
    }

    public void setGraphQLNumItineraries(Integer numItineraries) {
      this.numItineraries = numItineraries;
    }

    public void setGraphQLOmitCanceled(Boolean omitCanceled) {
      this.omitCanceled = omitCanceled;
    }

    public void setGraphQLOptimize(GraphQLOptimizeType optimize) {
      this.optimize = optimize;
    }

    public void setGraphQLPageCursor(String pageCursor) {
      this.pageCursor = pageCursor;
    }

    public void setGraphQLParking(GraphQLVehicleParkingInput parking) {
      this.parking = parking;
    }

    public void setGraphQLPreferred(GraphQLInputPreferredInput preferred) {
      this.preferred = preferred;
    }

    public void setGraphQLReverseOptimizeOnTheFly(Boolean reverseOptimizeOnTheFly) {
      this.reverseOptimizeOnTheFly = reverseOptimizeOnTheFly;
    }

    public void setGraphQLSearchWindow(Long searchWindow) {
      this.searchWindow = searchWindow;
    }

    public void setGraphQLStartTransitStopId(String startTransitStopId) {
      this.startTransitStopId = startTransitStopId;
    }

    public void setGraphQLStartTransitTripId(String startTransitTripId) {
      this.startTransitTripId = startTransitTripId;
    }

    public void setGraphQLTime(String time) {
      this.time = time;
    }

    public void setGraphQLTo(GraphQLInputCoordinatesInput to) {
      this.to = to;
    }

    public void setGraphQLToPlace(String toPlace) {
      this.toPlace = toPlace;
    }

    public void setGraphQLTransferPenalty(Integer transferPenalty) {
      this.transferPenalty = transferPenalty;
    }

    public void setGraphQLTransportModes(List<GraphQLTransportModeInput> transportModes) {
      this.transportModes = transportModes;
    }

    public void setGraphQLTriangle(GraphQLInputTriangleInput triangle) {
      this.triangle = triangle;
    }

    public void setGraphQLUnpreferred(GraphQLInputUnpreferredInput unpreferred) {
      this.unpreferred = unpreferred;
    }

    public void setGraphQLWaitAtBeginningFactor(Double waitAtBeginningFactor) {
      this.waitAtBeginningFactor = waitAtBeginningFactor;
    }

    public void setGraphQLWaitReluctance(Double waitReluctance) {
      this.waitReluctance = waitReluctance;
    }

    public void setGraphQLWalkBoardCost(Integer walkBoardCost) {
      this.walkBoardCost = walkBoardCost;
    }

    public void setGraphQLWalkOnStreetReluctance(Double walkOnStreetReluctance) {
      this.walkOnStreetReluctance = walkOnStreetReluctance;
    }

    public void setGraphQLWalkReluctance(Double walkReluctance) {
      this.walkReluctance = walkReluctance;
    }

    public void setGraphQLWalkSafetyFactor(Double walkSafetyFactor) {
      this.walkSafetyFactor = walkSafetyFactor;
    }

    public void setGraphQLWalkSpeed(Double walkSpeed) {
      this.walkSpeed = walkSpeed;
    }

    public void setGraphQLWheelchair(Boolean wheelchair) {
      this.wheelchair = wheelchair;
    }
  }

  public static class GraphQLQueryTypeRentalVehicleArgs {

    private String id;

    public GraphQLQueryTypeRentalVehicleArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypeRentalVehiclesArgs {

    private List<GraphQLFormFactor> formFactors;
    private List<String> ids;

    public GraphQLQueryTypeRentalVehiclesArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("formFactors") != null) {
          this.formFactors =
            ((List<Object>) args.get("formFactors")).stream()
              .map(item ->
                item instanceof GraphQLFormFactor ? item : GraphQLFormFactor.valueOf((String) item)
              )
              .map(GraphQLFormFactor.class::cast)
              .collect(Collectors.toList());
        }
        this.ids = (List<String>) args.get("ids");
      }
    }

    public List<GraphQLFormFactor> getGraphQLFormFactors() {
      return this.formFactors;
    }

    public List<String> getGraphQLIds() {
      return this.ids;
    }

    public void setGraphQLFormFactors(List<GraphQLFormFactor> formFactors) {
      this.formFactors = formFactors;
    }

    public void setGraphQLIds(List<String> ids) {
      this.ids = ids;
    }
  }

  public static class GraphQLQueryTypeRouteArgs {

    private String id;

    public GraphQLQueryTypeRouteArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypeRoutesArgs {

    private List<String> feeds;
    private List<String> ids;
    private String name;
    private List<GraphQLMode> transportModes;

    public GraphQLQueryTypeRoutesArgs(Map<String, Object> args) {
      if (args != null) {
        this.feeds = (List<String>) args.get("feeds");
        this.ids = (List<String>) args.get("ids");
        this.name = (String) args.get("name");
        if (args.get("transportModes") != null) {
          this.transportModes =
            ((List<Object>) args.get("transportModes")).stream()
              .map(item -> item instanceof GraphQLMode ? item : GraphQLMode.valueOf((String) item))
              .map(GraphQLMode.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public List<String> getGraphQLFeeds() {
      return this.feeds;
    }

    public List<String> getGraphQLIds() {
      return this.ids;
    }

    public String getGraphQLName() {
      return this.name;
    }

    public List<GraphQLMode> getGraphQLTransportModes() {
      return this.transportModes;
    }

    public void setGraphQLFeeds(List<String> feeds) {
      this.feeds = feeds;
    }

    public void setGraphQLIds(List<String> ids) {
      this.ids = ids;
    }

    public void setGraphQLName(String name) {
      this.name = name;
    }

    public void setGraphQLTransportModes(List<GraphQLMode> transportModes) {
      this.transportModes = transportModes;
    }
  }

  public static class GraphQLQueryTypeStationArgs {

    private String id;

    public GraphQLQueryTypeStationArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypeStationsArgs {

    private List<String> ids;
    private String name;

    public GraphQLQueryTypeStationsArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (List<String>) args.get("ids");
        this.name = (String) args.get("name");
      }
    }

    public List<String> getGraphQLIds() {
      return this.ids;
    }

    public String getGraphQLName() {
      return this.name;
    }

    public void setGraphQLIds(List<String> ids) {
      this.ids = ids;
    }

    public void setGraphQLName(String name) {
      this.name = name;
    }
  }

  public static class GraphQLQueryTypeStopArgs {

    private String id;

    public GraphQLQueryTypeStopArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypeStopsArgs {

    private List<String> ids;
    private String name;

    public GraphQLQueryTypeStopsArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (List<String>) args.get("ids");
        this.name = (String) args.get("name");
      }
    }

    public List<String> getGraphQLIds() {
      return this.ids;
    }

    public String getGraphQLName() {
      return this.name;
    }

    public void setGraphQLIds(List<String> ids) {
      this.ids = ids;
    }

    public void setGraphQLName(String name) {
      this.name = name;
    }
  }

  public static class GraphQLQueryTypeStopsByBboxArgs {

    private List<String> feeds;
    private Double maxLat;
    private Double maxLon;
    private Double minLat;
    private Double minLon;

    public GraphQLQueryTypeStopsByBboxArgs(Map<String, Object> args) {
      if (args != null) {
        this.feeds = (List<String>) args.get("feeds");
        this.maxLat = (Double) args.get("maxLat");
        this.maxLon = (Double) args.get("maxLon");
        this.minLat = (Double) args.get("minLat");
        this.minLon = (Double) args.get("minLon");
      }
    }

    public List<String> getGraphQLFeeds() {
      return this.feeds;
    }

    public Double getGraphQLMaxLat() {
      return this.maxLat;
    }

    public Double getGraphQLMaxLon() {
      return this.maxLon;
    }

    public Double getGraphQLMinLat() {
      return this.minLat;
    }

    public Double getGraphQLMinLon() {
      return this.minLon;
    }

    public void setGraphQLFeeds(List<String> feeds) {
      this.feeds = feeds;
    }

    public void setGraphQLMaxLat(Double maxLat) {
      this.maxLat = maxLat;
    }

    public void setGraphQLMaxLon(Double maxLon) {
      this.maxLon = maxLon;
    }

    public void setGraphQLMinLat(Double minLat) {
      this.minLat = minLat;
    }

    public void setGraphQLMinLon(Double minLon) {
      this.minLon = minLon;
    }
  }

  public static class GraphQLQueryTypeStopsByRadiusArgs {

    private String after;
    private String before;
    private List<String> feeds;
    private Integer first;
    private Integer last;
    private Double lat;
    private Double lon;
    private Integer radius;

    public GraphQLQueryTypeStopsByRadiusArgs(Map<String, Object> args) {
      if (args != null) {
        this.after = (String) args.get("after");
        this.before = (String) args.get("before");
        this.feeds = (List<String>) args.get("feeds");
        this.first = (Integer) args.get("first");
        this.last = (Integer) args.get("last");
        this.lat = (Double) args.get("lat");
        this.lon = (Double) args.get("lon");
        this.radius = (Integer) args.get("radius");
      }
    }

    public String getGraphQLAfter() {
      return this.after;
    }

    public String getGraphQLBefore() {
      return this.before;
    }

    public List<String> getGraphQLFeeds() {
      return this.feeds;
    }

    public Integer getGraphQLFirst() {
      return this.first;
    }

    public Integer getGraphQLLast() {
      return this.last;
    }

    public Double getGraphQLLat() {
      return this.lat;
    }

    public Double getGraphQLLon() {
      return this.lon;
    }

    public Integer getGraphQLRadius() {
      return this.radius;
    }

    public void setGraphQLAfter(String after) {
      this.after = after;
    }

    public void setGraphQLBefore(String before) {
      this.before = before;
    }

    public void setGraphQLFeeds(List<String> feeds) {
      this.feeds = feeds;
    }

    public void setGraphQLFirst(Integer first) {
      this.first = first;
    }

    public void setGraphQLLast(Integer last) {
      this.last = last;
    }

    public void setGraphQLLat(Double lat) {
      this.lat = lat;
    }

    public void setGraphQLLon(Double lon) {
      this.lon = lon;
    }

    public void setGraphQLRadius(Integer radius) {
      this.radius = radius;
    }
  }

  public static class GraphQLQueryTypeTripArgs {

    private String id;

    public GraphQLQueryTypeTripArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypeTripsArgs {

    private List<String> feeds;

    public GraphQLQueryTypeTripsArgs(Map<String, Object> args) {
      if (args != null) {
        this.feeds = (List<String>) args.get("feeds");
      }
    }

    public List<String> getGraphQLFeeds() {
      return this.feeds;
    }

    public void setGraphQLFeeds(List<String> feeds) {
      this.feeds = feeds;
    }
  }

  public static class GraphQLQueryTypeVehicleParkingArgs {

    private String id;

    public GraphQLQueryTypeVehicleParkingArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypeVehicleParkingsArgs {

    private List<String> ids;

    public GraphQLQueryTypeVehicleParkingsArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (List<String>) args.get("ids");
      }
    }

    public List<String> getGraphQLIds() {
      return this.ids;
    }

    public void setGraphQLIds(List<String> ids) {
      this.ids = ids;
    }
  }

  public static class GraphQLQueryTypeVehicleRentalStationArgs {

    private String id;

    public GraphQLQueryTypeVehicleRentalStationArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class GraphQLQueryTypeVehicleRentalStationsArgs {

    private List<String> ids;

    public GraphQLQueryTypeVehicleRentalStationsArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (List<String>) args.get("ids");
      }
    }

    public List<String> getGraphQLIds() {
      return this.ids;
    }

    public void setGraphQLIds(List<String> ids) {
      this.ids = ids;
    }
  }

  public enum GraphQLRealtimeState {
    ADDED,
    CANCELED,
    MODIFIED,
    SCHEDULED,
    UPDATED,
  }

  /** Actions to take relative to the current position when engaging a walking/driving step. */
  public enum GraphQLRelativeDirection {
    CIRCLE_CLOCKWISE,
    CIRCLE_COUNTERCLOCKWISE,
    CONTINUE,
    DEPART,
    ELEVATOR,
    ENTER_STATION,
    EXIT_STATION,
    FOLLOW_SIGNS,
    HARD_LEFT,
    HARD_RIGHT,
    LEFT,
    RIGHT,
    SLIGHTLY_LEFT,
    SLIGHTLY_RIGHT,
    UTURN_LEFT,
    UTURN_RIGHT,
  }

  public static class GraphQLRouteAlertsArgs {

    private List<GraphQLRouteAlertType> types;

    public GraphQLRouteAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("types") != null) {
          this.types =
            ((List<Object>) args.get("types")).stream()
              .map(item ->
                item instanceof GraphQLRouteAlertType
                  ? item
                  : GraphQLRouteAlertType.valueOf((String) item)
              )
              .map(GraphQLRouteAlertType.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public List<GraphQLRouteAlertType> getGraphQLTypes() {
      return this.types;
    }

    public void setGraphQLTypes(List<GraphQLRouteAlertType> types) {
      this.types = types;
    }
  }

  public static class GraphQLRouteLongNameArgs {

    private String language;

    public GraphQLRouteLongNameArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getGraphQLLanguage() {
      return this.language;
    }

    public void setGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  /** Entities that are relevant for routes that can contain alerts */
  public enum GraphQLRouteAlertType {
    AGENCY,
    PATTERNS,
    ROUTE,
    ROUTE_TYPE,
    STOPS_ON_ROUTE,
    STOPS_ON_TRIPS,
    TRIPS,
  }

  public enum GraphQLRoutingErrorCode {
    LOCATION_NOT_FOUND,
    NO_STOPS_IN_RANGE,
    NO_TRANSIT_CONNECTION,
    NO_TRANSIT_CONNECTION_IN_SEARCH_WINDOW,
    OUTSIDE_BOUNDS,
    OUTSIDE_SERVICE_PERIOD,
    WALKING_BETTER_THAN_TRANSIT,
  }

  public static class GraphQLStopAlertsArgs {

    private List<GraphQLStopAlertType> types;

    public GraphQLStopAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("types") != null) {
          this.types =
            ((List<Object>) args.get("types")).stream()
              .map(item ->
                item instanceof GraphQLStopAlertType
                  ? item
                  : GraphQLStopAlertType.valueOf((String) item)
              )
              .map(GraphQLStopAlertType.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public List<GraphQLStopAlertType> getGraphQLTypes() {
      return this.types;
    }

    public void setGraphQLTypes(List<GraphQLStopAlertType> types) {
      this.types = types;
    }
  }

  public static class GraphQLStopDescArgs {

    private String language;

    public GraphQLStopDescArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getGraphQLLanguage() {
      return this.language;
    }

    public void setGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  public static class GraphQLStopNameArgs {

    private String language;

    public GraphQLStopNameArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getGraphQLLanguage() {
      return this.language;
    }

    public void setGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  public static class GraphQLStopStopTimesForPatternArgs {

    private String id;
    private Integer numberOfDepartures;
    private Boolean omitCanceled;
    private Boolean omitNonPickups;
    private Long startTime;
    private Integer timeRange;

    public GraphQLStopStopTimesForPatternArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
        this.numberOfDepartures = (Integer) args.get("numberOfDepartures");
        this.omitCanceled = (Boolean) args.get("omitCanceled");
        this.omitNonPickups = (Boolean) args.get("omitNonPickups");
        this.startTime = (Long) args.get("startTime");
        this.timeRange = (Integer) args.get("timeRange");
      }
    }

    public String getGraphQLId() {
      return this.id;
    }

    public Integer getGraphQLNumberOfDepartures() {
      return this.numberOfDepartures;
    }

    public Boolean getGraphQLOmitCanceled() {
      return this.omitCanceled;
    }

    public Boolean getGraphQLOmitNonPickups() {
      return this.omitNonPickups;
    }

    public Long getGraphQLStartTime() {
      return this.startTime;
    }

    public Integer getGraphQLTimeRange() {
      return this.timeRange;
    }

    public void setGraphQLId(String id) {
      this.id = id;
    }

    public void setGraphQLNumberOfDepartures(Integer numberOfDepartures) {
      this.numberOfDepartures = numberOfDepartures;
    }

    public void setGraphQLOmitCanceled(Boolean omitCanceled) {
      this.omitCanceled = omitCanceled;
    }

    public void setGraphQLOmitNonPickups(Boolean omitNonPickups) {
      this.omitNonPickups = omitNonPickups;
    }

    public void setGraphQLStartTime(Long startTime) {
      this.startTime = startTime;
    }

    public void setGraphQLTimeRange(Integer timeRange) {
      this.timeRange = timeRange;
    }
  }

  public static class GraphQLStopStoptimesForPatternsArgs {

    private Integer numberOfDepartures;
    private Boolean omitCanceled;
    private Boolean omitNonPickups;
    private Long startTime;
    private Integer timeRange;

    public GraphQLStopStoptimesForPatternsArgs(Map<String, Object> args) {
      if (args != null) {
        this.numberOfDepartures = (Integer) args.get("numberOfDepartures");
        this.omitCanceled = (Boolean) args.get("omitCanceled");
        this.omitNonPickups = (Boolean) args.get("omitNonPickups");
        this.startTime = (Long) args.get("startTime");
        this.timeRange = (Integer) args.get("timeRange");
      }
    }

    public Integer getGraphQLNumberOfDepartures() {
      return this.numberOfDepartures;
    }

    public Boolean getGraphQLOmitCanceled() {
      return this.omitCanceled;
    }

    public Boolean getGraphQLOmitNonPickups() {
      return this.omitNonPickups;
    }

    public Long getGraphQLStartTime() {
      return this.startTime;
    }

    public Integer getGraphQLTimeRange() {
      return this.timeRange;
    }

    public void setGraphQLNumberOfDepartures(Integer numberOfDepartures) {
      this.numberOfDepartures = numberOfDepartures;
    }

    public void setGraphQLOmitCanceled(Boolean omitCanceled) {
      this.omitCanceled = omitCanceled;
    }

    public void setGraphQLOmitNonPickups(Boolean omitNonPickups) {
      this.omitNonPickups = omitNonPickups;
    }

    public void setGraphQLStartTime(Long startTime) {
      this.startTime = startTime;
    }

    public void setGraphQLTimeRange(Integer timeRange) {
      this.timeRange = timeRange;
    }
  }

  public static class GraphQLStopStoptimesForServiceDateArgs {

    private String date;
    private Boolean omitCanceled;
    private Boolean omitNonPickups;

    public GraphQLStopStoptimesForServiceDateArgs(Map<String, Object> args) {
      if (args != null) {
        this.date = (String) args.get("date");
        this.omitCanceled = (Boolean) args.get("omitCanceled");
        this.omitNonPickups = (Boolean) args.get("omitNonPickups");
      }
    }

    public String getGraphQLDate() {
      return this.date;
    }

    public Boolean getGraphQLOmitCanceled() {
      return this.omitCanceled;
    }

    public Boolean getGraphQLOmitNonPickups() {
      return this.omitNonPickups;
    }

    public void setGraphQLDate(String date) {
      this.date = date;
    }

    public void setGraphQLOmitCanceled(Boolean omitCanceled) {
      this.omitCanceled = omitCanceled;
    }

    public void setGraphQLOmitNonPickups(Boolean omitNonPickups) {
      this.omitNonPickups = omitNonPickups;
    }
  }

  public static class GraphQLStopStoptimesWithoutPatternsArgs {

    private Integer numberOfDepartures;
    private Boolean omitCanceled;
    private Boolean omitNonPickups;
    private Long startTime;
    private Integer timeRange;

    public GraphQLStopStoptimesWithoutPatternsArgs(Map<String, Object> args) {
      if (args != null) {
        this.numberOfDepartures = (Integer) args.get("numberOfDepartures");
        this.omitCanceled = (Boolean) args.get("omitCanceled");
        this.omitNonPickups = (Boolean) args.get("omitNonPickups");
        this.startTime = (Long) args.get("startTime");
        this.timeRange = (Integer) args.get("timeRange");
      }
    }

    public Integer getGraphQLNumberOfDepartures() {
      return this.numberOfDepartures;
    }

    public Boolean getGraphQLOmitCanceled() {
      return this.omitCanceled;
    }

    public Boolean getGraphQLOmitNonPickups() {
      return this.omitNonPickups;
    }

    public Long getGraphQLStartTime() {
      return this.startTime;
    }

    public Integer getGraphQLTimeRange() {
      return this.timeRange;
    }

    public void setGraphQLNumberOfDepartures(Integer numberOfDepartures) {
      this.numberOfDepartures = numberOfDepartures;
    }

    public void setGraphQLOmitCanceled(Boolean omitCanceled) {
      this.omitCanceled = omitCanceled;
    }

    public void setGraphQLOmitNonPickups(Boolean omitNonPickups) {
      this.omitNonPickups = omitNonPickups;
    }

    public void setGraphQLStartTime(Long startTime) {
      this.startTime = startTime;
    }

    public void setGraphQLTimeRange(Integer timeRange) {
      this.timeRange = timeRange;
    }
  }

  public static class GraphQLStopTransfersArgs {

    private Integer maxDistance;

    public GraphQLStopTransfersArgs(Map<String, Object> args) {
      if (args != null) {
        this.maxDistance = (Integer) args.get("maxDistance");
      }
    }

    public Integer getGraphQLMaxDistance() {
      return this.maxDistance;
    }

    public void setGraphQLMaxDistance(Integer maxDistance) {
      this.maxDistance = maxDistance;
    }
  }

  public static class GraphQLStopUrlArgs {

    private String language;

    public GraphQLStopUrlArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getGraphQLLanguage() {
      return this.language;
    }

    public void setGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  /** Entities, which are relevant for a stop and can contain alerts */
  public enum GraphQLStopAlertType {
    AGENCIES_OF_ROUTES,
    PATTERNS,
    ROUTES,
    STOP,
    STOP_ON_ROUTES,
    STOP_ON_TRIPS,
    TRIPS,
  }

  public enum GraphQLStopPositionType {
    FIRST,
    LAST,
    MIDDLE,
  }

  public static class GraphQLStoptimeHeadsignArgs {

    private String language;

    public GraphQLStoptimeHeadsignArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getGraphQLLanguage() {
      return this.language;
    }

    public void setGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  public enum GraphQLTransitMode {
    AIRPLANE,
    BUS,
    CABLE_CAR,
    CARPOOL,
    COACH,
    FERRY,
    FUNICULAR,
    GONDOLA,
    MONORAIL,
    RAIL,
    SUBWAY,
    TAXI,
    TRAM,
    TROLLEYBUS,
  }

  public static class GraphQLTransportModeInput {

    private GraphQLMode mode;
    private GraphQLQualifier qualifier;

    public GraphQLTransportModeInput(Map<String, Object> args) {
      if (args != null) {
        if (args.get("mode") instanceof GraphQLMode) {
          this.mode = (GraphQLMode) args.get("mode");
        } else {
          this.mode = GraphQLMode.valueOf((String) args.get("mode"));
        }
        if (args.get("qualifier") instanceof GraphQLQualifier) {
          this.qualifier = (GraphQLQualifier) args.get("qualifier");
        } else {
          this.qualifier = GraphQLQualifier.valueOf((String) args.get("qualifier"));
        }
      }
    }

    public GraphQLMode getGraphQLMode() {
      return this.mode;
    }

    public GraphQLQualifier getGraphQLQualifier() {
      return this.qualifier;
    }

    public void setGraphQLMode(GraphQLMode mode) {
      this.mode = mode;
    }

    public void setGraphQLQualifier(GraphQLQualifier qualifier) {
      this.qualifier = qualifier;
    }
  }

  public static class GraphQLTripAlertsArgs {

    private List<GraphQLTripAlertType> types;

    public GraphQLTripAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("types") != null) {
          this.types =
            ((List<Object>) args.get("types")).stream()
              .map(item ->
                item instanceof GraphQLTripAlertType
                  ? item
                  : GraphQLTripAlertType.valueOf((String) item)
              )
              .map(GraphQLTripAlertType.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public List<GraphQLTripAlertType> getGraphQLTypes() {
      return this.types;
    }

    public void setGraphQLTypes(List<GraphQLTripAlertType> types) {
      this.types = types;
    }
  }

  public static class GraphQLTripArrivalStoptimeArgs {

    private String serviceDate;

    public GraphQLTripArrivalStoptimeArgs(Map<String, Object> args) {
      if (args != null) {
        this.serviceDate = (String) args.get("serviceDate");
      }
    }

    public String getGraphQLServiceDate() {
      return this.serviceDate;
    }

    public void setGraphQLServiceDate(String serviceDate) {
      this.serviceDate = serviceDate;
    }
  }

  public static class GraphQLTripDepartureStoptimeArgs {

    private String serviceDate;

    public GraphQLTripDepartureStoptimeArgs(Map<String, Object> args) {
      if (args != null) {
        this.serviceDate = (String) args.get("serviceDate");
      }
    }

    public String getGraphQLServiceDate() {
      return this.serviceDate;
    }

    public void setGraphQLServiceDate(String serviceDate) {
      this.serviceDate = serviceDate;
    }
  }

  public static class GraphQLTripStoptimesForDateArgs {

    private String serviceDate;

    public GraphQLTripStoptimesForDateArgs(Map<String, Object> args) {
      if (args != null) {
        this.serviceDate = (String) args.get("serviceDate");
      }
    }

    public String getGraphQLServiceDate() {
      return this.serviceDate;
    }

    public void setGraphQLServiceDate(String serviceDate) {
      this.serviceDate = serviceDate;
    }
  }

  public static class GraphQLTripTripHeadsignArgs {

    private String language;

    public GraphQLTripTripHeadsignArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getGraphQLLanguage() {
      return this.language;
    }

    public void setGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  /** Entities, which are relevant for a trip and can contain alerts */
  public enum GraphQLTripAlertType {
    AGENCY,
    PATTERN,
    ROUTE,
    ROUTE_TYPE,
    STOPS_ON_TRIP,
    TRIP,
  }

  public static class GraphQLVehicleParkingNameArgs {

    private String language;

    public GraphQLVehicleParkingNameArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getGraphQLLanguage() {
      return this.language;
    }

    public void setGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  public static class GraphQLVehicleParkingNoteArgs {

    private String language;

    public GraphQLVehicleParkingNoteArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getGraphQLLanguage() {
      return this.language;
    }

    public void setGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  public static class GraphQLVehicleParkingInput {

    private List<GraphQLParkingFilterInput> filters;
    private List<GraphQLParkingFilterInput> preferred;
    private Integer unpreferredCost;

    public GraphQLVehicleParkingInput(Map<String, Object> args) {
      if (args != null) {
        if (args.get("filters") != null) {
          this.filters = (List<GraphQLParkingFilterInput>) args.get("filters");
        }
        if (args.get("preferred") != null) {
          this.preferred = (List<GraphQLParkingFilterInput>) args.get("preferred");
        }
        this.unpreferredCost = (Integer) args.get("unpreferredCost");
      }
    }

    public List<GraphQLParkingFilterInput> getGraphQLFilters() {
      return this.filters;
    }

    public List<GraphQLParkingFilterInput> getGraphQLPreferred() {
      return this.preferred;
    }

    public Integer getGraphQLUnpreferredCost() {
      return this.unpreferredCost;
    }

    public void setGraphQLFilters(List<GraphQLParkingFilterInput> filters) {
      this.filters = filters;
    }

    public void setGraphQLPreferred(List<GraphQLParkingFilterInput> preferred) {
      this.preferred = preferred;
    }

    public void setGraphQLUnpreferredCost(Integer unpreferredCost) {
      this.unpreferredCost = unpreferredCost;
    }
  }

  /**
   * The state of the vehicle parking. TEMPORARILY_CLOSED and CLOSED are distinct states so that they
   * may be represented differently to the user.
   */
  public enum GraphQLVehicleParkingState {
    CLOSED,
    OPERATIONAL,
    TEMPORARILY_CLOSED,
  }

  /** How close the vehicle is to the stop. */
  public enum GraphQLVehicleStopStatus {
    INCOMING_AT,
    IN_TRANSIT_TO,
    STOPPED_AT,
  }

  public enum GraphQLVertexType {
    BIKEPARK,
    BIKESHARE,
    NORMAL,
    PARKANDRIDE,
    TRANSIT,
  }

  public enum GraphQLWheelchairBoarding {
    NOT_POSSIBLE,
    NO_INFORMATION,
    POSSIBLE,
  }
}
