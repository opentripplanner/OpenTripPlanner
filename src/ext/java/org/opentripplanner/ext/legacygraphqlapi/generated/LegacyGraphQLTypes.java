// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
package org.opentripplanner.ext.legacygraphqlapi.generated;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class LegacyGraphQLTypes {

  /** The cardinal (compass) direction taken when engaging a walking/driving step. */
  public enum LegacyGraphQLAbsoluteDirection {
    EAST,
    NORTH,
    NORTHEAST,
    NORTHWEST,
    SOUTH,
    SOUTHEAST,
    SOUTHWEST,
    WEST,
  }

  public static class LegacyGraphQLAgencyAlertsArgs {

    private Iterable<LegacyGraphQLAgencyAlertType> types;

    public LegacyGraphQLAgencyAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("types") != null) {
          this.types =
            ((List<Object>) args.get("types")).stream()
              .map(item ->
                item instanceof LegacyGraphQLAgencyAlertType
                  ? item
                  : LegacyGraphQLAgencyAlertType.valueOf((String) item)
              )
              .map(LegacyGraphQLAgencyAlertType.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public Iterable<LegacyGraphQLAgencyAlertType> getLegacyGraphQLTypes() {
      return this.types;
    }

    public void setLegacyGraphQLTypes(Iterable<LegacyGraphQLAgencyAlertType> types) {
      this.types = types;
    }
  }

  /** Entities, which are relevant for an agency and can contain alerts */
  public enum LegacyGraphQLAgencyAlertType {
    AGENCY,
    ROUTES,
    ROUTE_TYPES,
  }

  /** Cause of a alert */
  public enum LegacyGraphQLAlertCauseType {
    ACCIDENT,
    CONSTRUCTION,
    DEMONSTRATION,
    HOLIDAY,
    MAINTENANCE,
    MEDICAL_EMERGENCY,
    OTHER_CAUSE,
    POLICE_ACTIVITY,
    STRIKE,
    TECHNICAL_PROBLEM,
    UNKNOWN_CAUSE,
    WEATHER,
  }

  /** Effect of a alert */
  public enum LegacyGraphQLAlertEffectType {
    ACCESSIBILITY_ISSUE,
    ADDITIONAL_SERVICE,
    DETOUR,
    MODIFIED_SERVICE,
    NO_EFFECT,
    NO_SERVICE,
    OTHER_EFFECT,
    REDUCED_SERVICE,
    SIGNIFICANT_DELAYS,
    STOP_MOVED,
    UNKNOWN_EFFECT,
  }

  /** Severity level of a alert */
  public enum LegacyGraphQLAlertSeverityLevelType {
    INFO,
    SEVERE,
    UNKNOWN_SEVERITY,
    WARNING,
  }

  public static class LegacyGraphQLBikeParkNameArgs {

    private String language;

    public LegacyGraphQLBikeParkNameArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getLegacyGraphQLLanguage() {
      return this.language;
    }

    public void setLegacyGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  public enum LegacyGraphQLBikesAllowed {
    ALLOWED,
    NOT_ALLOWED,
    NO_INFORMATION,
  }

  public static class LegacyGraphQLCarParkNameArgs {

    private String language;

    public LegacyGraphQLCarParkNameArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getLegacyGraphQLLanguage() {
      return this.language;
    }

    public void setLegacyGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  public static class LegacyGraphQLDepartureRowStoptimesArgs {

    private Integer numberOfDepartures;
    private Boolean omitCanceled;
    private Boolean omitNonPickups;
    private Long startTime;
    private Integer timeRange;

    public LegacyGraphQLDepartureRowStoptimesArgs(Map<String, Object> args) {
      if (args != null) {
        this.numberOfDepartures = (Integer) args.get("numberOfDepartures");
        this.omitCanceled = (Boolean) args.get("omitCanceled");
        this.omitNonPickups = (Boolean) args.get("omitNonPickups");
        this.startTime = (Long) args.get("startTime");
        this.timeRange = (Integer) args.get("timeRange");
      }
    }

    public Integer getLegacyGraphQLNumberOfDepartures() {
      return this.numberOfDepartures;
    }

    public Boolean getLegacyGraphQLOmitCanceled() {
      return this.omitCanceled;
    }

    public Boolean getLegacyGraphQLOmitNonPickups() {
      return this.omitNonPickups;
    }

    public Long getLegacyGraphQLStartTime() {
      return this.startTime;
    }

    public Integer getLegacyGraphQLTimeRange() {
      return this.timeRange;
    }

    public void setLegacyGraphQLNumberOfDepartures(Integer numberOfDepartures) {
      this.numberOfDepartures = numberOfDepartures;
    }

    public void setLegacyGraphQLOmitCanceled(Boolean omitCanceled) {
      this.omitCanceled = omitCanceled;
    }

    public void setLegacyGraphQLOmitNonPickups(Boolean omitNonPickups) {
      this.omitNonPickups = omitNonPickups;
    }

    public void setLegacyGraphQLStartTime(Long startTime) {
      this.startTime = startTime;
    }

    public void setLegacyGraphQLTimeRange(Integer timeRange) {
      this.timeRange = timeRange;
    }
  }

  public static class LegacyGraphQLFeedAlertsArgs {

    private Iterable<LegacyGraphQLFeedAlertType> types;

    public LegacyGraphQLFeedAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("types") != null) {
          this.types =
            ((List<Object>) args.get("types")).stream()
              .map(item ->
                item instanceof LegacyGraphQLFeedAlertType
                  ? item
                  : LegacyGraphQLFeedAlertType.valueOf((String) item)
              )
              .map(LegacyGraphQLFeedAlertType.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public Iterable<LegacyGraphQLFeedAlertType> getLegacyGraphQLTypes() {
      return this.types;
    }

    public void setLegacyGraphQLTypes(Iterable<LegacyGraphQLFeedAlertType> types) {
      this.types = types;
    }
  }

  /** Entities, which are relevant for a feed and can contain alerts */
  public enum LegacyGraphQLFeedAlertType {
    AGENCIES,
    ROUTE_TYPES,
  }

  public enum LegacyGraphQLFilterPlaceType {
    BICYCLE_RENT,
    BIKE_PARK,
    CAR_PARK,
    DEPARTURE_ROW,
    STOP,
    VEHICLE_RENT,
  }

  public enum LegacyGraphQLFormFactor {
    BICYCLE,
    CAR,
    CARGO_BICYCLE,
    MOPED,
    OTHER,
    SCOOTER,
    SCOOTER_SEATED,
    SCOOTER_STANDING,
  }

  public static class LegacyGraphQLInputBannedInput {

    private String agencies;
    private String routes;
    private String stops;
    private String stopsHard;
    private String trips;

    public LegacyGraphQLInputBannedInput(Map<String, Object> args) {
      if (args != null) {
        this.agencies = (String) args.get("agencies");
        this.routes = (String) args.get("routes");
        this.stops = (String) args.get("stops");
        this.stopsHard = (String) args.get("stopsHard");
        this.trips = (String) args.get("trips");
      }
    }

    public String getLegacyGraphQLAgencies() {
      return this.agencies;
    }

    public String getLegacyGraphQLRoutes() {
      return this.routes;
    }

    public String getLegacyGraphQLStops() {
      return this.stops;
    }

    public String getLegacyGraphQLStopsHard() {
      return this.stopsHard;
    }

    public String getLegacyGraphQLTrips() {
      return this.trips;
    }

    public void setLegacyGraphQLAgencies(String agencies) {
      this.agencies = agencies;
    }

    public void setLegacyGraphQLRoutes(String routes) {
      this.routes = routes;
    }

    public void setLegacyGraphQLStops(String stops) {
      this.stops = stops;
    }

    public void setLegacyGraphQLStopsHard(String stopsHard) {
      this.stopsHard = stopsHard;
    }

    public void setLegacyGraphQLTrips(String trips) {
      this.trips = trips;
    }
  }

  public static class LegacyGraphQLInputCoordinatesInput {

    private String address;
    private Double lat;
    private Integer locationSlack;
    private Double lon;

    public LegacyGraphQLInputCoordinatesInput(Map<String, Object> args) {
      if (args != null) {
        this.address = (String) args.get("address");
        this.lat = (Double) args.get("lat");
        this.locationSlack = (Integer) args.get("locationSlack");
        this.lon = (Double) args.get("lon");
      }
    }

    public String getLegacyGraphQLAddress() {
      return this.address;
    }

    public Double getLegacyGraphQLLat() {
      return this.lat;
    }

    public Integer getLegacyGraphQLLocationSlack() {
      return this.locationSlack;
    }

    public Double getLegacyGraphQLLon() {
      return this.lon;
    }

    public void setLegacyGraphQLAddress(String address) {
      this.address = address;
    }

    public void setLegacyGraphQLLat(Double lat) {
      this.lat = lat;
    }

    public void setLegacyGraphQLLocationSlack(Integer locationSlack) {
      this.locationSlack = locationSlack;
    }

    public void setLegacyGraphQLLon(Double lon) {
      this.lon = lon;
    }
  }

  public enum LegacyGraphQLInputField {
    DATE_TIME,
    FROM,
    TO,
  }

  public static class LegacyGraphQLInputFiltersInput {

    private Iterable<String> bikeParks;
    private Iterable<String> bikeRentalStations;
    private Iterable<String> carParks;
    private Iterable<String> routes;
    private Iterable<String> stops;

    public LegacyGraphQLInputFiltersInput(Map<String, Object> args) {
      if (args != null) {
        this.bikeParks = (Iterable<String>) args.get("bikeParks");
        this.bikeRentalStations = (Iterable<String>) args.get("bikeRentalStations");
        this.carParks = (Iterable<String>) args.get("carParks");
        this.routes = (Iterable<String>) args.get("routes");
        this.stops = (Iterable<String>) args.get("stops");
      }
    }

    public Iterable<String> getLegacyGraphQLBikeParks() {
      return this.bikeParks;
    }

    public Iterable<String> getLegacyGraphQLBikeRentalStations() {
      return this.bikeRentalStations;
    }

    public Iterable<String> getLegacyGraphQLCarParks() {
      return this.carParks;
    }

    public Iterable<String> getLegacyGraphQLRoutes() {
      return this.routes;
    }

    public Iterable<String> getLegacyGraphQLStops() {
      return this.stops;
    }

    public void setLegacyGraphQLBikeParks(Iterable<String> bikeParks) {
      this.bikeParks = bikeParks;
    }

    public void setLegacyGraphQLBikeRentalStations(Iterable<String> bikeRentalStations) {
      this.bikeRentalStations = bikeRentalStations;
    }

    public void setLegacyGraphQLCarParks(Iterable<String> carParks) {
      this.carParks = carParks;
    }

    public void setLegacyGraphQLRoutes(Iterable<String> routes) {
      this.routes = routes;
    }

    public void setLegacyGraphQLStops(Iterable<String> stops) {
      this.stops = stops;
    }
  }

  public static class LegacyGraphQLInputModeWeightInput {

    private Double AIRPLANE;
    private Double BUS;
    private Double CABLE_CAR;
    private Double FERRY;
    private Double FUNICULAR;
    private Double GONDOLA;
    private Double RAIL;
    private Double SUBWAY;
    private Double TRAM;

    public LegacyGraphQLInputModeWeightInput(Map<String, Object> args) {
      if (args != null) {
        this.AIRPLANE = (Double) args.get("AIRPLANE");
        this.BUS = (Double) args.get("BUS");
        this.CABLE_CAR = (Double) args.get("CABLE_CAR");
        this.FERRY = (Double) args.get("FERRY");
        this.FUNICULAR = (Double) args.get("FUNICULAR");
        this.GONDOLA = (Double) args.get("GONDOLA");
        this.RAIL = (Double) args.get("RAIL");
        this.SUBWAY = (Double) args.get("SUBWAY");
        this.TRAM = (Double) args.get("TRAM");
      }
    }

    public Double getLegacyGraphQLAirplane() {
      return this.AIRPLANE;
    }

    public Double getLegacyGraphQLBus() {
      return this.BUS;
    }

    public Double getLegacyGraphQLCable_Car() {
      return this.CABLE_CAR;
    }

    public Double getLegacyGraphQLFerry() {
      return this.FERRY;
    }

    public Double getLegacyGraphQLFunicular() {
      return this.FUNICULAR;
    }

    public Double getLegacyGraphQLGondola() {
      return this.GONDOLA;
    }

    public Double getLegacyGraphQLRail() {
      return this.RAIL;
    }

    public Double getLegacyGraphQLSubway() {
      return this.SUBWAY;
    }

    public Double getLegacyGraphQLTram() {
      return this.TRAM;
    }

    public void setLegacyGraphQLAirplane(Double AIRPLANE) {
      this.AIRPLANE = AIRPLANE;
    }

    public void setLegacyGraphQLBus(Double BUS) {
      this.BUS = BUS;
    }

    public void setLegacyGraphQLCable_Car(Double CABLE_CAR) {
      this.CABLE_CAR = CABLE_CAR;
    }

    public void setLegacyGraphQLFerry(Double FERRY) {
      this.FERRY = FERRY;
    }

    public void setLegacyGraphQLFunicular(Double FUNICULAR) {
      this.FUNICULAR = FUNICULAR;
    }

    public void setLegacyGraphQLGondola(Double GONDOLA) {
      this.GONDOLA = GONDOLA;
    }

    public void setLegacyGraphQLRail(Double RAIL) {
      this.RAIL = RAIL;
    }

    public void setLegacyGraphQLSubway(Double SUBWAY) {
      this.SUBWAY = SUBWAY;
    }

    public void setLegacyGraphQLTram(Double TRAM) {
      this.TRAM = TRAM;
    }
  }

  public static class LegacyGraphQLInputPreferredInput {

    private String agencies;
    private Integer otherThanPreferredRoutesPenalty;
    private String routes;

    public LegacyGraphQLInputPreferredInput(Map<String, Object> args) {
      if (args != null) {
        this.agencies = (String) args.get("agencies");
        this.otherThanPreferredRoutesPenalty =
          (Integer) args.get("otherThanPreferredRoutesPenalty");
        this.routes = (String) args.get("routes");
      }
    }

    public String getLegacyGraphQLAgencies() {
      return this.agencies;
    }

    public Integer getLegacyGraphQLOtherThanPreferredRoutesPenalty() {
      return this.otherThanPreferredRoutesPenalty;
    }

    public String getLegacyGraphQLRoutes() {
      return this.routes;
    }

    public void setLegacyGraphQLAgencies(String agencies) {
      this.agencies = agencies;
    }

    public void setLegacyGraphQLOtherThanPreferredRoutesPenalty(
      Integer otherThanPreferredRoutesPenalty
    ) {
      this.otherThanPreferredRoutesPenalty = otherThanPreferredRoutesPenalty;
    }

    public void setLegacyGraphQLRoutes(String routes) {
      this.routes = routes;
    }
  }

  public static class LegacyGraphQLInputTriangleInput {

    private Double safetyFactor;
    private Double slopeFactor;
    private Double timeFactor;

    public LegacyGraphQLInputTriangleInput(Map<String, Object> args) {
      if (args != null) {
        this.safetyFactor = (Double) args.get("safetyFactor");
        this.slopeFactor = (Double) args.get("slopeFactor");
        this.timeFactor = (Double) args.get("timeFactor");
      }
    }

    public Double getLegacyGraphQLSafetyFactor() {
      return this.safetyFactor;
    }

    public Double getLegacyGraphQLSlopeFactor() {
      return this.slopeFactor;
    }

    public Double getLegacyGraphQLTimeFactor() {
      return this.timeFactor;
    }

    public void setLegacyGraphQLSafetyFactor(Double safetyFactor) {
      this.safetyFactor = safetyFactor;
    }

    public void setLegacyGraphQLSlopeFactor(Double slopeFactor) {
      this.slopeFactor = slopeFactor;
    }

    public void setLegacyGraphQLTimeFactor(Double timeFactor) {
      this.timeFactor = timeFactor;
    }
  }

  public static class LegacyGraphQLInputUnpreferredInput {

    private String agencies;
    private String routes;
    private String unpreferredCost;
    private Integer useUnpreferredRoutesPenalty;

    public LegacyGraphQLInputUnpreferredInput(Map<String, Object> args) {
      if (args != null) {
        this.agencies = (String) args.get("agencies");
        this.routes = (String) args.get("routes");
        this.unpreferredCost = (String) args.get("unpreferredCost");
        this.useUnpreferredRoutesPenalty = (Integer) args.get("useUnpreferredRoutesPenalty");
      }
    }

    public String getLegacyGraphQLAgencies() {
      return this.agencies;
    }

    public String getLegacyGraphQLRoutes() {
      return this.routes;
    }

    public String getLegacyGraphQLUnpreferredCost() {
      return this.unpreferredCost;
    }

    public Integer getLegacyGraphQLUseUnpreferredRoutesPenalty() {
      return this.useUnpreferredRoutesPenalty;
    }

    public void setLegacyGraphQLAgencies(String agencies) {
      this.agencies = agencies;
    }

    public void setLegacyGraphQLRoutes(String routes) {
      this.routes = routes;
    }

    public void setLegacyGraphQLUnpreferredCost(String unpreferredCost) {
      this.unpreferredCost = unpreferredCost;
    }

    public void setLegacyGraphQLUseUnpreferredRoutesPenalty(Integer useUnpreferredRoutesPenalty) {
      this.useUnpreferredRoutesPenalty = useUnpreferredRoutesPenalty;
    }
  }

  public static class LegacyGraphQLLegNextLegsArgs {

    private Iterable<LegacyGraphQLTransitMode> destinationModesWithParentStation;
    private Integer numberOfLegs;
    private Iterable<LegacyGraphQLTransitMode> originModesWithParentStation;

    public LegacyGraphQLLegNextLegsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("destinationModesWithParentStation") != null) {
          this.destinationModesWithParentStation =
            ((List<Object>) args.get("destinationModesWithParentStation")).stream()
              .map(item ->
                item instanceof LegacyGraphQLTransitMode
                  ? item
                  : LegacyGraphQLTransitMode.valueOf((String) item)
              )
              .map(LegacyGraphQLTransitMode.class::cast)
              .collect(Collectors.toList());
        }
        this.numberOfLegs = (Integer) args.get("numberOfLegs");
        if (args.get("originModesWithParentStation") != null) {
          this.originModesWithParentStation =
            ((List<Object>) args.get("originModesWithParentStation")).stream()
              .map(item ->
                item instanceof LegacyGraphQLTransitMode
                  ? item
                  : LegacyGraphQLTransitMode.valueOf((String) item)
              )
              .map(LegacyGraphQLTransitMode.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public Iterable<LegacyGraphQLTransitMode> getLegacyGraphQLDestinationModesWithParentStation() {
      return this.destinationModesWithParentStation;
    }

    public Integer getLegacyGraphQLNumberOfLegs() {
      return this.numberOfLegs;
    }

    public Iterable<LegacyGraphQLTransitMode> getLegacyGraphQLOriginModesWithParentStation() {
      return this.originModesWithParentStation;
    }

    public void setLegacyGraphQLDestinationModesWithParentStation(
      Iterable<LegacyGraphQLTransitMode> destinationModesWithParentStation
    ) {
      this.destinationModesWithParentStation = destinationModesWithParentStation;
    }

    public void setLegacyGraphQLNumberOfLegs(Integer numberOfLegs) {
      this.numberOfLegs = numberOfLegs;
    }

    public void setLegacyGraphQLOriginModesWithParentStation(
      Iterable<LegacyGraphQLTransitMode> originModesWithParentStation
    ) {
      this.originModesWithParentStation = originModesWithParentStation;
    }
  }

  /** Identifies whether this stop represents a stop or station. */
  public enum LegacyGraphQLLocationType {
    ENTRANCE,
    STATION,
    STOP,
  }

  public enum LegacyGraphQLMode {
    AIRPLANE,
    BICYCLE,
    BUS,
    CABLE_CAR,
    CAR,
    CARPOOL,
    COACH,
    FERRY,
    FLEX,
    FLEXIBLE,
    FUNICULAR,
    GONDOLA,
    LEG_SWITCH,
    MONORAIL,
    RAIL,
    SCOOTER,
    SUBWAY,
    TAXI,
    TRAM,
    TRANSIT,
    TROLLEYBUS,
    WALK,
  }

  public static class LegacyGraphQLOpeningHoursDatesArgs {

    private Iterable<String> dates;

    public LegacyGraphQLOpeningHoursDatesArgs(Map<String, Object> args) {
      if (args != null) {
        this.dates = (Iterable<String>) args.get("dates");
      }
    }

    public Iterable<String> getLegacyGraphQLDates() {
      return this.dates;
    }

    public void setLegacyGraphQLDates(Iterable<String> dates) {
      this.dates = dates;
    }
  }

  /** Optimization type for bicycling legs */
  public enum LegacyGraphQLOptimizeType {
    FLAT,
    GREENWAYS,
    QUICK,
    SAFE,
    TRIANGLE,
  }

  public static class LegacyGraphQLPatternAlertsArgs {

    private Iterable<LegacyGraphQLPatternAlertType> types;

    public LegacyGraphQLPatternAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("types") != null) {
          this.types =
            ((List<Object>) args.get("types")).stream()
              .map(item ->
                item instanceof LegacyGraphQLPatternAlertType
                  ? item
                  : LegacyGraphQLPatternAlertType.valueOf((String) item)
              )
              .map(LegacyGraphQLPatternAlertType.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public Iterable<LegacyGraphQLPatternAlertType> getLegacyGraphQLTypes() {
      return this.types;
    }

    public void setLegacyGraphQLTypes(Iterable<LegacyGraphQLPatternAlertType> types) {
      this.types = types;
    }
  }

  public static class LegacyGraphQLPatternTripsForDateArgs {

    private String serviceDate;

    public LegacyGraphQLPatternTripsForDateArgs(Map<String, Object> args) {
      if (args != null) {
        this.serviceDate = (String) args.get("serviceDate");
      }
    }

    public String getLegacyGraphQLServiceDate() {
      return this.serviceDate;
    }

    public void setLegacyGraphQLServiceDate(String serviceDate) {
      this.serviceDate = serviceDate;
    }
  }

  /** Entities, which are relevant for a pattern and can contain alerts */
  public enum LegacyGraphQLPatternAlertType {
    AGENCY,
    PATTERN,
    ROUTE,
    ROUTE_TYPE,
    STOPS_ON_PATTERN,
    STOPS_ON_TRIPS,
    TRIPS,
  }

  public enum LegacyGraphQLPickupDropoffType {
    CALL_AGENCY,
    COORDINATE_WITH_DRIVER,
    NONE,
    SCHEDULED,
  }

  public enum LegacyGraphQLPropulsionType {
    COMBUSTION,
    COMBUSTION_DIESEL,
    ELECTRIC,
    ELECTRIC_ASSIST,
    HUMAN,
    HYBRID,
    HYDROGEN_FUEL_CELL,
    PLUG_IN_HYBRID,
  }

  /**
   * Additional qualifier for a transport mode.
   * Note that qualifiers can only be used with certain transport modes.
   */
  public enum LegacyGraphQLQualifier {
    ACCESS,
    DIRECT,
    DROPOFF,
    EGRESS,
    HAVE,
    KEEP,
    PARK,
    PICKUP,
    RENT,
  }

  public static class LegacyGraphQLQueryTypeAgencyArgs {

    private String id;

    public LegacyGraphQLQueryTypeAgencyArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypeAlertsArgs {

    private Iterable<LegacyGraphQLAlertCauseType> cause;
    private Iterable<LegacyGraphQLAlertEffectType> effect;
    private Iterable<String> feeds;
    private Iterable<String> route;
    private Iterable<LegacyGraphQLAlertSeverityLevelType> severityLevel;
    private Iterable<String> stop;

    public LegacyGraphQLQueryTypeAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("cause") != null) {
          this.cause =
            ((List<Object>) args.get("cause")).stream()
              .map(item ->
                item instanceof LegacyGraphQLAlertCauseType
                  ? item
                  : LegacyGraphQLAlertCauseType.valueOf((String) item)
              )
              .map(LegacyGraphQLAlertCauseType.class::cast)
              .collect(Collectors.toList());
        }
        if (args.get("effect") != null) {
          this.effect =
            ((List<Object>) args.get("effect")).stream()
              .map(item ->
                item instanceof LegacyGraphQLAlertEffectType
                  ? item
                  : LegacyGraphQLAlertEffectType.valueOf((String) item)
              )
              .map(LegacyGraphQLAlertEffectType.class::cast)
              .collect(Collectors.toList());
        }
        this.feeds = (Iterable<String>) args.get("feeds");
        this.route = (Iterable<String>) args.get("route");
        if (args.get("severityLevel") != null) {
          this.severityLevel =
            ((List<Object>) args.get("severityLevel")).stream()
              .map(item ->
                item instanceof LegacyGraphQLAlertSeverityLevelType
                  ? item
                  : LegacyGraphQLAlertSeverityLevelType.valueOf((String) item)
              )
              .map(LegacyGraphQLAlertSeverityLevelType.class::cast)
              .collect(Collectors.toList());
        }
        this.stop = (Iterable<String>) args.get("stop");
      }
    }

    public Iterable<LegacyGraphQLAlertCauseType> getLegacyGraphQLCause() {
      return this.cause;
    }

    public Iterable<LegacyGraphQLAlertEffectType> getLegacyGraphQLEffect() {
      return this.effect;
    }

    public Iterable<String> getLegacyGraphQLFeeds() {
      return this.feeds;
    }

    public Iterable<String> getLegacyGraphQLRoute() {
      return this.route;
    }

    public Iterable<LegacyGraphQLAlertSeverityLevelType> getLegacyGraphQLSeverityLevel() {
      return this.severityLevel;
    }

    public Iterable<String> getLegacyGraphQLStop() {
      return this.stop;
    }

    public void setLegacyGraphQLCause(Iterable<LegacyGraphQLAlertCauseType> cause) {
      this.cause = cause;
    }

    public void setLegacyGraphQLEffect(Iterable<LegacyGraphQLAlertEffectType> effect) {
      this.effect = effect;
    }

    public void setLegacyGraphQLFeeds(Iterable<String> feeds) {
      this.feeds = feeds;
    }

    public void setLegacyGraphQLRoute(Iterable<String> route) {
      this.route = route;
    }

    public void setLegacyGraphQLSeverityLevel(
      Iterable<LegacyGraphQLAlertSeverityLevelType> severityLevel
    ) {
      this.severityLevel = severityLevel;
    }

    public void setLegacyGraphQLStop(Iterable<String> stop) {
      this.stop = stop;
    }
  }

  public static class LegacyGraphQLQueryTypeBikeParkArgs {

    private String id;

    public LegacyGraphQLQueryTypeBikeParkArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypeBikeRentalStationArgs {

    private String id;

    public LegacyGraphQLQueryTypeBikeRentalStationArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypeBikeRentalStationsArgs {

    private Iterable<String> ids;

    public LegacyGraphQLQueryTypeBikeRentalStationsArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (Iterable<String>) args.get("ids");
      }
    }

    public Iterable<String> getLegacyGraphQLIds() {
      return this.ids;
    }

    public void setLegacyGraphQLIds(Iterable<String> ids) {
      this.ids = ids;
    }
  }

  public static class LegacyGraphQLQueryTypeCancelledTripTimesArgs {

    private Iterable<String> feeds;
    private Integer maxArrivalTime;
    private String maxDate;
    private Integer maxDepartureTime;
    private Integer minArrivalTime;
    private String minDate;
    private Integer minDepartureTime;
    private Iterable<String> patterns;
    private Iterable<String> routes;
    private Iterable<String> trips;

    public LegacyGraphQLQueryTypeCancelledTripTimesArgs(Map<String, Object> args) {
      if (args != null) {
        this.feeds = (Iterable<String>) args.get("feeds");
        this.maxArrivalTime = (Integer) args.get("maxArrivalTime");
        this.maxDate = (String) args.get("maxDate");
        this.maxDepartureTime = (Integer) args.get("maxDepartureTime");
        this.minArrivalTime = (Integer) args.get("minArrivalTime");
        this.minDate = (String) args.get("minDate");
        this.minDepartureTime = (Integer) args.get("minDepartureTime");
        this.patterns = (Iterable<String>) args.get("patterns");
        this.routes = (Iterable<String>) args.get("routes");
        this.trips = (Iterable<String>) args.get("trips");
      }
    }

    public Iterable<String> getLegacyGraphQLFeeds() {
      return this.feeds;
    }

    public Integer getLegacyGraphQLMaxArrivalTime() {
      return this.maxArrivalTime;
    }

    public String getLegacyGraphQLMaxDate() {
      return this.maxDate;
    }

    public Integer getLegacyGraphQLMaxDepartureTime() {
      return this.maxDepartureTime;
    }

    public Integer getLegacyGraphQLMinArrivalTime() {
      return this.minArrivalTime;
    }

    public String getLegacyGraphQLMinDate() {
      return this.minDate;
    }

    public Integer getLegacyGraphQLMinDepartureTime() {
      return this.minDepartureTime;
    }

    public Iterable<String> getLegacyGraphQLPatterns() {
      return this.patterns;
    }

    public Iterable<String> getLegacyGraphQLRoutes() {
      return this.routes;
    }

    public Iterable<String> getLegacyGraphQLTrips() {
      return this.trips;
    }

    public void setLegacyGraphQLFeeds(Iterable<String> feeds) {
      this.feeds = feeds;
    }

    public void setLegacyGraphQLMaxArrivalTime(Integer maxArrivalTime) {
      this.maxArrivalTime = maxArrivalTime;
    }

    public void setLegacyGraphQLMaxDate(String maxDate) {
      this.maxDate = maxDate;
    }

    public void setLegacyGraphQLMaxDepartureTime(Integer maxDepartureTime) {
      this.maxDepartureTime = maxDepartureTime;
    }

    public void setLegacyGraphQLMinArrivalTime(Integer minArrivalTime) {
      this.minArrivalTime = minArrivalTime;
    }

    public void setLegacyGraphQLMinDate(String minDate) {
      this.minDate = minDate;
    }

    public void setLegacyGraphQLMinDepartureTime(Integer minDepartureTime) {
      this.minDepartureTime = minDepartureTime;
    }

    public void setLegacyGraphQLPatterns(Iterable<String> patterns) {
      this.patterns = patterns;
    }

    public void setLegacyGraphQLRoutes(Iterable<String> routes) {
      this.routes = routes;
    }

    public void setLegacyGraphQLTrips(Iterable<String> trips) {
      this.trips = trips;
    }
  }

  public static class LegacyGraphQLQueryTypeCarParkArgs {

    private String id;

    public LegacyGraphQLQueryTypeCarParkArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypeCarParksArgs {

    private Iterable<String> ids;

    public LegacyGraphQLQueryTypeCarParksArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (Iterable<String>) args.get("ids");
      }
    }

    public Iterable<String> getLegacyGraphQLIds() {
      return this.ids;
    }

    public void setLegacyGraphQLIds(Iterable<String> ids) {
      this.ids = ids;
    }
  }

  public static class LegacyGraphQLQueryTypeClusterArgs {

    private String id;

    public LegacyGraphQLQueryTypeClusterArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypeDepartureRowArgs {

    private String id;

    public LegacyGraphQLQueryTypeDepartureRowArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypeFuzzyTripArgs {

    private String date;
    private Integer direction;
    private String route;
    private Integer time;

    public LegacyGraphQLQueryTypeFuzzyTripArgs(Map<String, Object> args) {
      if (args != null) {
        this.date = (String) args.get("date");
        this.direction = (Integer) args.get("direction");
        this.route = (String) args.get("route");
        this.time = (Integer) args.get("time");
      }
    }

    public String getLegacyGraphQLDate() {
      return this.date;
    }

    public Integer getLegacyGraphQLDirection() {
      return this.direction;
    }

    public String getLegacyGraphQLRoute() {
      return this.route;
    }

    public Integer getLegacyGraphQLTime() {
      return this.time;
    }

    public void setLegacyGraphQLDate(String date) {
      this.date = date;
    }

    public void setLegacyGraphQLDirection(Integer direction) {
      this.direction = direction;
    }

    public void setLegacyGraphQLRoute(String route) {
      this.route = route;
    }

    public void setLegacyGraphQLTime(Integer time) {
      this.time = time;
    }
  }

  public static class LegacyGraphQLQueryTypeNearestArgs {

    private String after;
    private String before;
    private LegacyGraphQLInputFiltersInput filterByIds;
    private Iterable<LegacyGraphQLMode> filterByModes;
    private Iterable<LegacyGraphQLFilterPlaceType> filterByPlaceTypes;
    private Integer first;
    private Integer last;
    private Double lat;
    private Double lon;
    private Integer maxDistance;
    private Integer maxResults;

    public LegacyGraphQLQueryTypeNearestArgs(Map<String, Object> args) {
      if (args != null) {
        this.after = (String) args.get("after");
        this.before = (String) args.get("before");
        this.filterByIds =
          new LegacyGraphQLInputFiltersInput((Map<String, Object>) args.get("filterByIds"));
        if (args.get("filterByModes") != null) {
          this.filterByModes =
            ((List<Object>) args.get("filterByModes")).stream()
              .map(item ->
                item instanceof LegacyGraphQLMode ? item : LegacyGraphQLMode.valueOf((String) item)
              )
              .map(LegacyGraphQLMode.class::cast)
              .collect(Collectors.toList());
        }
        if (args.get("filterByPlaceTypes") != null) {
          this.filterByPlaceTypes =
            ((List<Object>) args.get("filterByPlaceTypes")).stream()
              .map(item ->
                item instanceof LegacyGraphQLFilterPlaceType
                  ? item
                  : LegacyGraphQLFilterPlaceType.valueOf((String) item)
              )
              .map(LegacyGraphQLFilterPlaceType.class::cast)
              .collect(Collectors.toList());
        }
        this.first = (Integer) args.get("first");
        this.last = (Integer) args.get("last");
        this.lat = (Double) args.get("lat");
        this.lon = (Double) args.get("lon");
        this.maxDistance = (Integer) args.get("maxDistance");
        this.maxResults = (Integer) args.get("maxResults");
      }
    }

    public String getLegacyGraphQLAfter() {
      return this.after;
    }

    public String getLegacyGraphQLBefore() {
      return this.before;
    }

    public LegacyGraphQLInputFiltersInput getLegacyGraphQLFilterByIds() {
      return this.filterByIds;
    }

    public Iterable<LegacyGraphQLMode> getLegacyGraphQLFilterByModes() {
      return this.filterByModes;
    }

    public Iterable<LegacyGraphQLFilterPlaceType> getLegacyGraphQLFilterByPlaceTypes() {
      return this.filterByPlaceTypes;
    }

    public Integer getLegacyGraphQLFirst() {
      return this.first;
    }

    public Integer getLegacyGraphQLLast() {
      return this.last;
    }

    public Double getLegacyGraphQLLat() {
      return this.lat;
    }

    public Double getLegacyGraphQLLon() {
      return this.lon;
    }

    public Integer getLegacyGraphQLMaxDistance() {
      return this.maxDistance;
    }

    public Integer getLegacyGraphQLMaxResults() {
      return this.maxResults;
    }

    public void setLegacyGraphQLAfter(String after) {
      this.after = after;
    }

    public void setLegacyGraphQLBefore(String before) {
      this.before = before;
    }

    public void setLegacyGraphQLFilterByIds(LegacyGraphQLInputFiltersInput filterByIds) {
      this.filterByIds = filterByIds;
    }

    public void setLegacyGraphQLFilterByModes(Iterable<LegacyGraphQLMode> filterByModes) {
      this.filterByModes = filterByModes;
    }

    public void setLegacyGraphQLFilterByPlaceTypes(
      Iterable<LegacyGraphQLFilterPlaceType> filterByPlaceTypes
    ) {
      this.filterByPlaceTypes = filterByPlaceTypes;
    }

    public void setLegacyGraphQLFirst(Integer first) {
      this.first = first;
    }

    public void setLegacyGraphQLLast(Integer last) {
      this.last = last;
    }

    public void setLegacyGraphQLLat(Double lat) {
      this.lat = lat;
    }

    public void setLegacyGraphQLLon(Double lon) {
      this.lon = lon;
    }

    public void setLegacyGraphQLMaxDistance(Integer maxDistance) {
      this.maxDistance = maxDistance;
    }

    public void setLegacyGraphQLMaxResults(Integer maxResults) {
      this.maxResults = maxResults;
    }
  }

  public static class LegacyGraphQLQueryTypeNodeArgs {

    private graphql.relay.Relay.ResolvedGlobalId id;

    public LegacyGraphQLQueryTypeNodeArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (graphql.relay.Relay.ResolvedGlobalId) args.get("id");
      }
    }

    public graphql.relay.Relay.ResolvedGlobalId getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(graphql.relay.Relay.ResolvedGlobalId id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypePatternArgs {

    private String id;

    public LegacyGraphQLQueryTypePatternArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypePlanArgs {

    private Integer alightSlack;
    private Boolean allowBikeRental;
    private Boolean allowKeepingRentedBicycleAtDestination;
    private Iterable<String> allowedBikeRentalNetworks;
    private Iterable<String> allowedTicketTypes;
    private Iterable<String> allowedVehicleRentalNetworks;
    private Boolean arriveBy;
    private LegacyGraphQLInputBannedInput banned;
    private Iterable<String> bannedVehicleRentalNetworks;
    private Boolean batch;
    private Integer bikeBoardCost;
    private Double bikeReluctance;
    private Double bikeSpeed;
    private Integer bikeSwitchCost;
    private Integer bikeSwitchTime;
    private Double bikeWalkingReluctance;
    private Integer boardSlack;
    private Double carParkCarLegWeight;
    private Double carReluctance;
    private Long claimInitialWait;
    private Boolean compactLegsByReversedSearch;
    private String date;
    private Boolean debugItineraryFilter;
    private Boolean disableRemainingWeightHeuristic;
    private LegacyGraphQLInputCoordinatesInput from;
    private String fromPlace;
    private Integer heuristicStepsPerMainStep;
    private Boolean ignoreRealtimeUpdates;
    private Iterable<LegacyGraphQLInputCoordinatesInput> intermediatePlaces;
    private Double itineraryFiltering;
    private Integer keepingRentedBicycleAtDestinationCost;
    private String locale;
    private Integer maxPreTransitTime;
    private Integer maxTransfers;
    private Double maxWalkDistance;
    private Integer minTransferTime;
    private LegacyGraphQLInputModeWeightInput modeWeight;
    private Integer nonpreferredTransferPenalty;
    private Integer numItineraries;
    private Boolean omitCanceled;
    private LegacyGraphQLOptimizeType optimize;
    private String pageCursor;
    private LegacyGraphQLInputPreferredInput preferred;
    private Boolean reverseOptimizeOnTheFly;
    private Long searchWindow;
    private String startTransitStopId;
    private String startTransitTripId;
    private String time;
    private LegacyGraphQLInputCoordinatesInput to;
    private String toPlace;
    private Integer transferPenalty;
    private Iterable<LegacyGraphQLTransportModeInput> transportModes;
    private LegacyGraphQLInputTriangleInput triangle;
    private LegacyGraphQLInputUnpreferredInput unpreferred;
    private Double waitAtBeginningFactor;
    private Double waitReluctance;
    private Integer walkBoardCost;
    private Double walkOnStreetReluctance;
    private Double walkReluctance;
    private Double walkSafetyFactor;
    private Double walkSpeed;
    private Boolean wheelchair;

    public LegacyGraphQLQueryTypePlanArgs(Map<String, Object> args) {
      if (args != null) {
        this.alightSlack = (Integer) args.get("alightSlack");
        this.allowBikeRental = (Boolean) args.get("allowBikeRental");
        this.allowKeepingRentedBicycleAtDestination =
          (Boolean) args.get("allowKeepingRentedBicycleAtDestination");
        this.allowedBikeRentalNetworks = (Iterable<String>) args.get("allowedBikeRentalNetworks");
        this.allowedTicketTypes = (Iterable<String>) args.get("allowedTicketTypes");
        this.allowedVehicleRentalNetworks =
          (Iterable<String>) args.get("allowedVehicleRentalNetworks");
        this.arriveBy = (Boolean) args.get("arriveBy");
        this.banned = new LegacyGraphQLInputBannedInput((Map<String, Object>) args.get("banned"));
        this.bannedVehicleRentalNetworks =
          (Iterable<String>) args.get("bannedVehicleRentalNetworks");
        this.batch = (Boolean) args.get("batch");
        this.bikeBoardCost = (Integer) args.get("bikeBoardCost");
        this.bikeReluctance = (Double) args.get("bikeReluctance");
        this.bikeSpeed = (Double) args.get("bikeSpeed");
        this.bikeSwitchCost = (Integer) args.get("bikeSwitchCost");
        this.bikeSwitchTime = (Integer) args.get("bikeSwitchTime");
        this.bikeWalkingReluctance = (Double) args.get("bikeWalkingReluctance");
        this.boardSlack = (Integer) args.get("boardSlack");
        this.carParkCarLegWeight = (Double) args.get("carParkCarLegWeight");
        this.carReluctance = (Double) args.get("carReluctance");
        this.claimInitialWait = (Long) args.get("claimInitialWait");
        this.compactLegsByReversedSearch = (Boolean) args.get("compactLegsByReversedSearch");
        this.date = (String) args.get("date");
        this.debugItineraryFilter = (Boolean) args.get("debugItineraryFilter");
        this.disableRemainingWeightHeuristic =
          (Boolean) args.get("disableRemainingWeightHeuristic");
        this.from = new LegacyGraphQLInputCoordinatesInput((Map<String, Object>) args.get("from"));
        this.fromPlace = (String) args.get("fromPlace");
        this.heuristicStepsPerMainStep = (Integer) args.get("heuristicStepsPerMainStep");
        this.ignoreRealtimeUpdates = (Boolean) args.get("ignoreRealtimeUpdates");
        if (args.get("intermediatePlaces") != null) {
          this.intermediatePlaces =
            (Iterable<LegacyGraphQLInputCoordinatesInput>) args.get("intermediatePlaces");
        }
        this.itineraryFiltering = (Double) args.get("itineraryFiltering");
        this.keepingRentedBicycleAtDestinationCost =
          (Integer) args.get("keepingRentedBicycleAtDestinationCost");
        this.locale = (String) args.get("locale");
        this.maxPreTransitTime = (Integer) args.get("maxPreTransitTime");
        this.maxTransfers = (Integer) args.get("maxTransfers");
        this.maxWalkDistance = (Double) args.get("maxWalkDistance");
        this.minTransferTime = (Integer) args.get("minTransferTime");
        this.modeWeight =
          new LegacyGraphQLInputModeWeightInput((Map<String, Object>) args.get("modeWeight"));
        this.nonpreferredTransferPenalty = (Integer) args.get("nonpreferredTransferPenalty");
        this.numItineraries = (Integer) args.get("numItineraries");
        this.omitCanceled = (Boolean) args.get("omitCanceled");
        if (args.get("optimize") instanceof LegacyGraphQLOptimizeType) {
          this.optimize = (LegacyGraphQLOptimizeType) args.get("optimize");
        } else {
          this.optimize = LegacyGraphQLOptimizeType.valueOf((String) args.get("optimize"));
        }
        this.pageCursor = (String) args.get("pageCursor");
        this.preferred =
          new LegacyGraphQLInputPreferredInput((Map<String, Object>) args.get("preferred"));
        this.reverseOptimizeOnTheFly = (Boolean) args.get("reverseOptimizeOnTheFly");
        this.searchWindow = (Long) args.get("searchWindow");
        this.startTransitStopId = (String) args.get("startTransitStopId");
        this.startTransitTripId = (String) args.get("startTransitTripId");
        this.time = (String) args.get("time");
        this.to = new LegacyGraphQLInputCoordinatesInput((Map<String, Object>) args.get("to"));
        this.toPlace = (String) args.get("toPlace");
        this.transferPenalty = (Integer) args.get("transferPenalty");
        if (args.get("transportModes") != null) {
          this.transportModes =
            (Iterable<LegacyGraphQLTransportModeInput>) args.get("transportModes");
        }
        this.triangle =
          new LegacyGraphQLInputTriangleInput((Map<String, Object>) args.get("triangle"));
        this.unpreferred =
          new LegacyGraphQLInputUnpreferredInput((Map<String, Object>) args.get("unpreferred"));
        this.waitAtBeginningFactor = (Double) args.get("waitAtBeginningFactor");
        this.waitReluctance = (Double) args.get("waitReluctance");
        this.walkBoardCost = (Integer) args.get("walkBoardCost");
        this.walkOnStreetReluctance = (Double) args.get("walkOnStreetReluctance");
        this.walkReluctance = (Double) args.get("walkReluctance");
        this.walkSafetyFactor = (Double) args.get("walkSafetyFactor");
        this.walkSpeed = (Double) args.get("walkSpeed");
        this.wheelchair = (Boolean) args.get("wheelchair");
      }
    }

    public Integer getLegacyGraphQLAlightSlack() {
      return this.alightSlack;
    }

    public Boolean getLegacyGraphQLAllowBikeRental() {
      return this.allowBikeRental;
    }

    public Boolean getLegacyGraphQLAllowKeepingRentedBicycleAtDestination() {
      return this.allowKeepingRentedBicycleAtDestination;
    }

    public Iterable<String> getLegacyGraphQLAllowedBikeRentalNetworks() {
      return this.allowedBikeRentalNetworks;
    }

    public Iterable<String> getLegacyGraphQLAllowedTicketTypes() {
      return this.allowedTicketTypes;
    }

    public Iterable<String> getLegacyGraphQLAllowedVehicleRentalNetworks() {
      return this.allowedVehicleRentalNetworks;
    }

    public Boolean getLegacyGraphQLArriveBy() {
      return this.arriveBy;
    }

    public LegacyGraphQLInputBannedInput getLegacyGraphQLBanned() {
      return this.banned;
    }

    public Iterable<String> getLegacyGraphQLBannedVehicleRentalNetworks() {
      return this.bannedVehicleRentalNetworks;
    }

    public Boolean getLegacyGraphQLBatch() {
      return this.batch;
    }

    public Integer getLegacyGraphQLBikeBoardCost() {
      return this.bikeBoardCost;
    }

    public Double getLegacyGraphQLBikeReluctance() {
      return this.bikeReluctance;
    }

    public Double getLegacyGraphQLBikeSpeed() {
      return this.bikeSpeed;
    }

    public Integer getLegacyGraphQLBikeSwitchCost() {
      return this.bikeSwitchCost;
    }

    public Integer getLegacyGraphQLBikeSwitchTime() {
      return this.bikeSwitchTime;
    }

    public Double getLegacyGraphQLBikeWalkingReluctance() {
      return this.bikeWalkingReluctance;
    }

    public Integer getLegacyGraphQLBoardSlack() {
      return this.boardSlack;
    }

    public Double getLegacyGraphQLCarParkCarLegWeight() {
      return this.carParkCarLegWeight;
    }

    public Double getLegacyGraphQLCarReluctance() {
      return this.carReluctance;
    }

    public Long getLegacyGraphQLClaimInitialWait() {
      return this.claimInitialWait;
    }

    public Boolean getLegacyGraphQLCompactLegsByReversedSearch() {
      return this.compactLegsByReversedSearch;
    }

    public String getLegacyGraphQLDate() {
      return this.date;
    }

    public Boolean getLegacyGraphQLDebugItineraryFilter() {
      return this.debugItineraryFilter;
    }

    public Boolean getLegacyGraphQLDisableRemainingWeightHeuristic() {
      return this.disableRemainingWeightHeuristic;
    }

    public LegacyGraphQLInputCoordinatesInput getLegacyGraphQLFrom() {
      return this.from;
    }

    public String getLegacyGraphQLFromPlace() {
      return this.fromPlace;
    }

    public Integer getLegacyGraphQLHeuristicStepsPerMainStep() {
      return this.heuristicStepsPerMainStep;
    }

    public Boolean getLegacyGraphQLIgnoreRealtimeUpdates() {
      return this.ignoreRealtimeUpdates;
    }

    public Iterable<LegacyGraphQLInputCoordinatesInput> getLegacyGraphQLIntermediatePlaces() {
      return this.intermediatePlaces;
    }

    public Double getLegacyGraphQLItineraryFiltering() {
      return this.itineraryFiltering;
    }

    public Integer getLegacyGraphQLKeepingRentedBicycleAtDestinationCost() {
      return this.keepingRentedBicycleAtDestinationCost;
    }

    public String getLegacyGraphQLLocale() {
      return this.locale;
    }

    public Integer getLegacyGraphQLMaxPreTransitTime() {
      return this.maxPreTransitTime;
    }

    public Integer getLegacyGraphQLMaxTransfers() {
      return this.maxTransfers;
    }

    public Double getLegacyGraphQLMaxWalkDistance() {
      return this.maxWalkDistance;
    }

    public Integer getLegacyGraphQLMinTransferTime() {
      return this.minTransferTime;
    }

    public LegacyGraphQLInputModeWeightInput getLegacyGraphQLModeWeight() {
      return this.modeWeight;
    }

    public Integer getLegacyGraphQLNonpreferredTransferPenalty() {
      return this.nonpreferredTransferPenalty;
    }

    public Integer getLegacyGraphQLNumItineraries() {
      return this.numItineraries;
    }

    public Boolean getLegacyGraphQLOmitCanceled() {
      return this.omitCanceled;
    }

    public LegacyGraphQLOptimizeType getLegacyGraphQLOptimize() {
      return this.optimize;
    }

    public String getLegacyGraphQLPageCursor() {
      return this.pageCursor;
    }

    public LegacyGraphQLInputPreferredInput getLegacyGraphQLPreferred() {
      return this.preferred;
    }

    public Boolean getLegacyGraphQLReverseOptimizeOnTheFly() {
      return this.reverseOptimizeOnTheFly;
    }

    public Long getLegacyGraphQLSearchWindow() {
      return this.searchWindow;
    }

    public String getLegacyGraphQLStartTransitStopId() {
      return this.startTransitStopId;
    }

    public String getLegacyGraphQLStartTransitTripId() {
      return this.startTransitTripId;
    }

    public String getLegacyGraphQLTime() {
      return this.time;
    }

    public LegacyGraphQLInputCoordinatesInput getLegacyGraphQLTo() {
      return this.to;
    }

    public String getLegacyGraphQLToPlace() {
      return this.toPlace;
    }

    public Integer getLegacyGraphQLTransferPenalty() {
      return this.transferPenalty;
    }

    public Iterable<LegacyGraphQLTransportModeInput> getLegacyGraphQLTransportModes() {
      return this.transportModes;
    }

    public LegacyGraphQLInputTriangleInput getLegacyGraphQLTriangle() {
      return this.triangle;
    }

    public LegacyGraphQLInputUnpreferredInput getLegacyGraphQLUnpreferred() {
      return this.unpreferred;
    }

    public Double getLegacyGraphQLWaitAtBeginningFactor() {
      return this.waitAtBeginningFactor;
    }

    public Double getLegacyGraphQLWaitReluctance() {
      return this.waitReluctance;
    }

    public Integer getLegacyGraphQLWalkBoardCost() {
      return this.walkBoardCost;
    }

    public Double getLegacyGraphQLWalkOnStreetReluctance() {
      return this.walkOnStreetReluctance;
    }

    public Double getLegacyGraphQLWalkReluctance() {
      return this.walkReluctance;
    }

    public Double getLegacyGraphQLWalkSafetyFactor() {
      return this.walkSafetyFactor;
    }

    public Double getLegacyGraphQLWalkSpeed() {
      return this.walkSpeed;
    }

    public Boolean getLegacyGraphQLWheelchair() {
      return this.wheelchair;
    }

    public void setLegacyGraphQLAlightSlack(Integer alightSlack) {
      this.alightSlack = alightSlack;
    }

    public void setLegacyGraphQLAllowBikeRental(Boolean allowBikeRental) {
      this.allowBikeRental = allowBikeRental;
    }

    public void setLegacyGraphQLAllowKeepingRentedBicycleAtDestination(
      Boolean allowKeepingRentedBicycleAtDestination
    ) {
      this.allowKeepingRentedBicycleAtDestination = allowKeepingRentedBicycleAtDestination;
    }

    public void setLegacyGraphQLAllowedBikeRentalNetworks(
      Iterable<String> allowedBikeRentalNetworks
    ) {
      this.allowedBikeRentalNetworks = allowedBikeRentalNetworks;
    }

    public void setLegacyGraphQLAllowedTicketTypes(Iterable<String> allowedTicketTypes) {
      this.allowedTicketTypes = allowedTicketTypes;
    }

    public void setLegacyGraphQLAllowedVehicleRentalNetworks(
      Iterable<String> allowedVehicleRentalNetworks
    ) {
      this.allowedVehicleRentalNetworks = allowedVehicleRentalNetworks;
    }

    public void setLegacyGraphQLArriveBy(Boolean arriveBy) {
      this.arriveBy = arriveBy;
    }

    public void setLegacyGraphQLBanned(LegacyGraphQLInputBannedInput banned) {
      this.banned = banned;
    }

    public void setLegacyGraphQLBannedVehicleRentalNetworks(
      Iterable<String> bannedVehicleRentalNetworks
    ) {
      this.bannedVehicleRentalNetworks = bannedVehicleRentalNetworks;
    }

    public void setLegacyGraphQLBatch(Boolean batch) {
      this.batch = batch;
    }

    public void setLegacyGraphQLBikeBoardCost(Integer bikeBoardCost) {
      this.bikeBoardCost = bikeBoardCost;
    }

    public void setLegacyGraphQLBikeReluctance(Double bikeReluctance) {
      this.bikeReluctance = bikeReluctance;
    }

    public void setLegacyGraphQLBikeSpeed(Double bikeSpeed) {
      this.bikeSpeed = bikeSpeed;
    }

    public void setLegacyGraphQLBikeSwitchCost(Integer bikeSwitchCost) {
      this.bikeSwitchCost = bikeSwitchCost;
    }

    public void setLegacyGraphQLBikeSwitchTime(Integer bikeSwitchTime) {
      this.bikeSwitchTime = bikeSwitchTime;
    }

    public void setLegacyGraphQLBikeWalkingReluctance(Double bikeWalkingReluctance) {
      this.bikeWalkingReluctance = bikeWalkingReluctance;
    }

    public void setLegacyGraphQLBoardSlack(Integer boardSlack) {
      this.boardSlack = boardSlack;
    }

    public void setLegacyGraphQLCarParkCarLegWeight(Double carParkCarLegWeight) {
      this.carParkCarLegWeight = carParkCarLegWeight;
    }

    public void setLegacyGraphQLCarReluctance(Double carReluctance) {
      this.carReluctance = carReluctance;
    }

    public void setLegacyGraphQLClaimInitialWait(Long claimInitialWait) {
      this.claimInitialWait = claimInitialWait;
    }

    public void setLegacyGraphQLCompactLegsByReversedSearch(Boolean compactLegsByReversedSearch) {
      this.compactLegsByReversedSearch = compactLegsByReversedSearch;
    }

    public void setLegacyGraphQLDate(String date) {
      this.date = date;
    }

    public void setLegacyGraphQLDebugItineraryFilter(Boolean debugItineraryFilter) {
      this.debugItineraryFilter = debugItineraryFilter;
    }

    public void setLegacyGraphQLDisableRemainingWeightHeuristic(
      Boolean disableRemainingWeightHeuristic
    ) {
      this.disableRemainingWeightHeuristic = disableRemainingWeightHeuristic;
    }

    public void setLegacyGraphQLFrom(LegacyGraphQLInputCoordinatesInput from) {
      this.from = from;
    }

    public void setLegacyGraphQLFromPlace(String fromPlace) {
      this.fromPlace = fromPlace;
    }

    public void setLegacyGraphQLHeuristicStepsPerMainStep(Integer heuristicStepsPerMainStep) {
      this.heuristicStepsPerMainStep = heuristicStepsPerMainStep;
    }

    public void setLegacyGraphQLIgnoreRealtimeUpdates(Boolean ignoreRealtimeUpdates) {
      this.ignoreRealtimeUpdates = ignoreRealtimeUpdates;
    }

    public void setLegacyGraphQLIntermediatePlaces(
      Iterable<LegacyGraphQLInputCoordinatesInput> intermediatePlaces
    ) {
      this.intermediatePlaces = intermediatePlaces;
    }

    public void setLegacyGraphQLItineraryFiltering(Double itineraryFiltering) {
      this.itineraryFiltering = itineraryFiltering;
    }

    public void setLegacyGraphQLKeepingRentedBicycleAtDestinationCost(
      Integer keepingRentedBicycleAtDestinationCost
    ) {
      this.keepingRentedBicycleAtDestinationCost = keepingRentedBicycleAtDestinationCost;
    }

    public void setLegacyGraphQLLocale(String locale) {
      this.locale = locale;
    }

    public void setLegacyGraphQLMaxPreTransitTime(Integer maxPreTransitTime) {
      this.maxPreTransitTime = maxPreTransitTime;
    }

    public void setLegacyGraphQLMaxTransfers(Integer maxTransfers) {
      this.maxTransfers = maxTransfers;
    }

    public void setLegacyGraphQLMaxWalkDistance(Double maxWalkDistance) {
      this.maxWalkDistance = maxWalkDistance;
    }

    public void setLegacyGraphQLMinTransferTime(Integer minTransferTime) {
      this.minTransferTime = minTransferTime;
    }

    public void setLegacyGraphQLModeWeight(LegacyGraphQLInputModeWeightInput modeWeight) {
      this.modeWeight = modeWeight;
    }

    public void setLegacyGraphQLNonpreferredTransferPenalty(Integer nonpreferredTransferPenalty) {
      this.nonpreferredTransferPenalty = nonpreferredTransferPenalty;
    }

    public void setLegacyGraphQLNumItineraries(Integer numItineraries) {
      this.numItineraries = numItineraries;
    }

    public void setLegacyGraphQLOmitCanceled(Boolean omitCanceled) {
      this.omitCanceled = omitCanceled;
    }

    public void setLegacyGraphQLOptimize(LegacyGraphQLOptimizeType optimize) {
      this.optimize = optimize;
    }

    public void setLegacyGraphQLPageCursor(String pageCursor) {
      this.pageCursor = pageCursor;
    }

    public void setLegacyGraphQLPreferred(LegacyGraphQLInputPreferredInput preferred) {
      this.preferred = preferred;
    }

    public void setLegacyGraphQLReverseOptimizeOnTheFly(Boolean reverseOptimizeOnTheFly) {
      this.reverseOptimizeOnTheFly = reverseOptimizeOnTheFly;
    }

    public void setLegacyGraphQLSearchWindow(Long searchWindow) {
      this.searchWindow = searchWindow;
    }

    public void setLegacyGraphQLStartTransitStopId(String startTransitStopId) {
      this.startTransitStopId = startTransitStopId;
    }

    public void setLegacyGraphQLStartTransitTripId(String startTransitTripId) {
      this.startTransitTripId = startTransitTripId;
    }

    public void setLegacyGraphQLTime(String time) {
      this.time = time;
    }

    public void setLegacyGraphQLTo(LegacyGraphQLInputCoordinatesInput to) {
      this.to = to;
    }

    public void setLegacyGraphQLToPlace(String toPlace) {
      this.toPlace = toPlace;
    }

    public void setLegacyGraphQLTransferPenalty(Integer transferPenalty) {
      this.transferPenalty = transferPenalty;
    }

    public void setLegacyGraphQLTransportModes(
      Iterable<LegacyGraphQLTransportModeInput> transportModes
    ) {
      this.transportModes = transportModes;
    }

    public void setLegacyGraphQLTriangle(LegacyGraphQLInputTriangleInput triangle) {
      this.triangle = triangle;
    }

    public void setLegacyGraphQLUnpreferred(LegacyGraphQLInputUnpreferredInput unpreferred) {
      this.unpreferred = unpreferred;
    }

    public void setLegacyGraphQLWaitAtBeginningFactor(Double waitAtBeginningFactor) {
      this.waitAtBeginningFactor = waitAtBeginningFactor;
    }

    public void setLegacyGraphQLWaitReluctance(Double waitReluctance) {
      this.waitReluctance = waitReluctance;
    }

    public void setLegacyGraphQLWalkBoardCost(Integer walkBoardCost) {
      this.walkBoardCost = walkBoardCost;
    }

    public void setLegacyGraphQLWalkOnStreetReluctance(Double walkOnStreetReluctance) {
      this.walkOnStreetReluctance = walkOnStreetReluctance;
    }

    public void setLegacyGraphQLWalkReluctance(Double walkReluctance) {
      this.walkReluctance = walkReluctance;
    }

    public void setLegacyGraphQLWalkSafetyFactor(Double walkSafetyFactor) {
      this.walkSafetyFactor = walkSafetyFactor;
    }

    public void setLegacyGraphQLWalkSpeed(Double walkSpeed) {
      this.walkSpeed = walkSpeed;
    }

    public void setLegacyGraphQLWheelchair(Boolean wheelchair) {
      this.wheelchair = wheelchair;
    }
  }

  public static class LegacyGraphQLQueryTypeRentalVehicleArgs {

    private String id;

    public LegacyGraphQLQueryTypeRentalVehicleArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypeRentalVehiclesArgs {

    private Iterable<LegacyGraphQLFormFactor> formFactors;
    private Iterable<String> ids;

    public LegacyGraphQLQueryTypeRentalVehiclesArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("formFactors") != null) {
          this.formFactors =
            ((List<Object>) args.get("formFactors")).stream()
              .map(item ->
                item instanceof LegacyGraphQLFormFactor
                  ? item
                  : LegacyGraphQLFormFactor.valueOf((String) item)
              )
              .map(LegacyGraphQLFormFactor.class::cast)
              .collect(Collectors.toList());
        }
        this.ids = (Iterable<String>) args.get("ids");
      }
    }

    public Iterable<LegacyGraphQLFormFactor> getLegacyGraphQLFormFactors() {
      return this.formFactors;
    }

    public Iterable<String> getLegacyGraphQLIds() {
      return this.ids;
    }

    public void setLegacyGraphQLFormFactors(Iterable<LegacyGraphQLFormFactor> formFactors) {
      this.formFactors = formFactors;
    }

    public void setLegacyGraphQLIds(Iterable<String> ids) {
      this.ids = ids;
    }
  }

  public static class LegacyGraphQLQueryTypeRouteArgs {

    private String id;

    public LegacyGraphQLQueryTypeRouteArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypeRoutesArgs {

    private Iterable<String> feeds;
    private Iterable<String> ids;
    private String name;
    private Iterable<LegacyGraphQLMode> transportModes;

    public LegacyGraphQLQueryTypeRoutesArgs(Map<String, Object> args) {
      if (args != null) {
        this.feeds = (Iterable<String>) args.get("feeds");
        this.ids = (Iterable<String>) args.get("ids");
        this.name = (String) args.get("name");
        if (args.get("transportModes") != null) {
          this.transportModes =
            ((List<Object>) args.get("transportModes")).stream()
              .map(item ->
                item instanceof LegacyGraphQLMode ? item : LegacyGraphQLMode.valueOf((String) item)
              )
              .map(LegacyGraphQLMode.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public Iterable<String> getLegacyGraphQLFeeds() {
      return this.feeds;
    }

    public Iterable<String> getLegacyGraphQLIds() {
      return this.ids;
    }

    public String getLegacyGraphQLName() {
      return this.name;
    }

    public Iterable<LegacyGraphQLMode> getLegacyGraphQLTransportModes() {
      return this.transportModes;
    }

    public void setLegacyGraphQLFeeds(Iterable<String> feeds) {
      this.feeds = feeds;
    }

    public void setLegacyGraphQLIds(Iterable<String> ids) {
      this.ids = ids;
    }

    public void setLegacyGraphQLName(String name) {
      this.name = name;
    }

    public void setLegacyGraphQLTransportModes(Iterable<LegacyGraphQLMode> transportModes) {
      this.transportModes = transportModes;
    }
  }

  public static class LegacyGraphQLQueryTypeStationArgs {

    private String id;

    public LegacyGraphQLQueryTypeStationArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypeStationsArgs {

    private Iterable<String> ids;
    private String name;

    public LegacyGraphQLQueryTypeStationsArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (Iterable<String>) args.get("ids");
        this.name = (String) args.get("name");
      }
    }

    public Iterable<String> getLegacyGraphQLIds() {
      return this.ids;
    }

    public String getLegacyGraphQLName() {
      return this.name;
    }

    public void setLegacyGraphQLIds(Iterable<String> ids) {
      this.ids = ids;
    }

    public void setLegacyGraphQLName(String name) {
      this.name = name;
    }
  }

  public static class LegacyGraphQLQueryTypeStopArgs {

    private String id;

    public LegacyGraphQLQueryTypeStopArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypeStopsArgs {

    private Iterable<String> ids;
    private String name;

    public LegacyGraphQLQueryTypeStopsArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (Iterable<String>) args.get("ids");
        this.name = (String) args.get("name");
      }
    }

    public Iterable<String> getLegacyGraphQLIds() {
      return this.ids;
    }

    public String getLegacyGraphQLName() {
      return this.name;
    }

    public void setLegacyGraphQLIds(Iterable<String> ids) {
      this.ids = ids;
    }

    public void setLegacyGraphQLName(String name) {
      this.name = name;
    }
  }

  public static class LegacyGraphQLQueryTypeStopsByBboxArgs {

    private Iterable<String> feeds;
    private Double maxLat;
    private Double maxLon;
    private Double minLat;
    private Double minLon;

    public LegacyGraphQLQueryTypeStopsByBboxArgs(Map<String, Object> args) {
      if (args != null) {
        this.feeds = (Iterable<String>) args.get("feeds");
        this.maxLat = (Double) args.get("maxLat");
        this.maxLon = (Double) args.get("maxLon");
        this.minLat = (Double) args.get("minLat");
        this.minLon = (Double) args.get("minLon");
      }
    }

    public Iterable<String> getLegacyGraphQLFeeds() {
      return this.feeds;
    }

    public Double getLegacyGraphQLMaxLat() {
      return this.maxLat;
    }

    public Double getLegacyGraphQLMaxLon() {
      return this.maxLon;
    }

    public Double getLegacyGraphQLMinLat() {
      return this.minLat;
    }

    public Double getLegacyGraphQLMinLon() {
      return this.minLon;
    }

    public void setLegacyGraphQLFeeds(Iterable<String> feeds) {
      this.feeds = feeds;
    }

    public void setLegacyGraphQLMaxLat(Double maxLat) {
      this.maxLat = maxLat;
    }

    public void setLegacyGraphQLMaxLon(Double maxLon) {
      this.maxLon = maxLon;
    }

    public void setLegacyGraphQLMinLat(Double minLat) {
      this.minLat = minLat;
    }

    public void setLegacyGraphQLMinLon(Double minLon) {
      this.minLon = minLon;
    }
  }

  public static class LegacyGraphQLQueryTypeStopsByRadiusArgs {

    private String after;
    private String before;
    private Iterable<String> feeds;
    private Integer first;
    private Integer last;
    private Double lat;
    private Double lon;
    private Integer radius;

    public LegacyGraphQLQueryTypeStopsByRadiusArgs(Map<String, Object> args) {
      if (args != null) {
        this.after = (String) args.get("after");
        this.before = (String) args.get("before");
        this.feeds = (Iterable<String>) args.get("feeds");
        this.first = (Integer) args.get("first");
        this.last = (Integer) args.get("last");
        this.lat = (Double) args.get("lat");
        this.lon = (Double) args.get("lon");
        this.radius = (Integer) args.get("radius");
      }
    }

    public String getLegacyGraphQLAfter() {
      return this.after;
    }

    public String getLegacyGraphQLBefore() {
      return this.before;
    }

    public Iterable<String> getLegacyGraphQLFeeds() {
      return this.feeds;
    }

    public Integer getLegacyGraphQLFirst() {
      return this.first;
    }

    public Integer getLegacyGraphQLLast() {
      return this.last;
    }

    public Double getLegacyGraphQLLat() {
      return this.lat;
    }

    public Double getLegacyGraphQLLon() {
      return this.lon;
    }

    public Integer getLegacyGraphQLRadius() {
      return this.radius;
    }

    public void setLegacyGraphQLAfter(String after) {
      this.after = after;
    }

    public void setLegacyGraphQLBefore(String before) {
      this.before = before;
    }

    public void setLegacyGraphQLFeeds(Iterable<String> feeds) {
      this.feeds = feeds;
    }

    public void setLegacyGraphQLFirst(Integer first) {
      this.first = first;
    }

    public void setLegacyGraphQLLast(Integer last) {
      this.last = last;
    }

    public void setLegacyGraphQLLat(Double lat) {
      this.lat = lat;
    }

    public void setLegacyGraphQLLon(Double lon) {
      this.lon = lon;
    }

    public void setLegacyGraphQLRadius(Integer radius) {
      this.radius = radius;
    }
  }

  public static class LegacyGraphQLQueryTypeTripArgs {

    private String id;

    public LegacyGraphQLQueryTypeTripArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypeTripsArgs {

    private Iterable<String> feeds;

    public LegacyGraphQLQueryTypeTripsArgs(Map<String, Object> args) {
      if (args != null) {
        this.feeds = (Iterable<String>) args.get("feeds");
      }
    }

    public Iterable<String> getLegacyGraphQLFeeds() {
      return this.feeds;
    }

    public void setLegacyGraphQLFeeds(Iterable<String> feeds) {
      this.feeds = feeds;
    }
  }

  public static class LegacyGraphQLQueryTypeVehicleParkingArgs {

    private String id;

    public LegacyGraphQLQueryTypeVehicleParkingArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypeVehicleParkingsArgs {

    private Iterable<String> ids;

    public LegacyGraphQLQueryTypeVehicleParkingsArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (Iterable<String>) args.get("ids");
      }
    }

    public Iterable<String> getLegacyGraphQLIds() {
      return this.ids;
    }

    public void setLegacyGraphQLIds(Iterable<String> ids) {
      this.ids = ids;
    }
  }

  public static class LegacyGraphQLQueryTypeVehicleRentalStationArgs {

    private String id;

    public LegacyGraphQLQueryTypeVehicleRentalStationArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }
  }

  public static class LegacyGraphQLQueryTypeVehicleRentalStationsArgs {

    private Iterable<String> ids;

    public LegacyGraphQLQueryTypeVehicleRentalStationsArgs(Map<String, Object> args) {
      if (args != null) {
        this.ids = (Iterable<String>) args.get("ids");
      }
    }

    public Iterable<String> getLegacyGraphQLIds() {
      return this.ids;
    }

    public void setLegacyGraphQLIds(Iterable<String> ids) {
      this.ids = ids;
    }
  }

  public enum LegacyGraphQLRealtimeState {
    ADDED,
    CANCELED,
    MODIFIED,
    SCHEDULED,
    UPDATED,
  }

  /** Actions to take relative to the current position when engaging a walking/driving step. */
  public enum LegacyGraphQLRelativeDirection {
    CIRCLE_CLOCKWISE,
    CIRCLE_COUNTERCLOCKWISE,
    CONTINUE,
    DEPART,
    ELEVATOR,
    HARD_LEFT,
    HARD_RIGHT,
    LEFT,
    RIGHT,
    SLIGHTLY_LEFT,
    SLIGHTLY_RIGHT,
    UTURN_LEFT,
    UTURN_RIGHT,
  }

  public static class LegacyGraphQLRouteAlertsArgs {

    private Iterable<LegacyGraphQLRouteAlertType> types;

    public LegacyGraphQLRouteAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("types") != null) {
          this.types =
            ((List<Object>) args.get("types")).stream()
              .map(item ->
                item instanceof LegacyGraphQLRouteAlertType
                  ? item
                  : LegacyGraphQLRouteAlertType.valueOf((String) item)
              )
              .map(LegacyGraphQLRouteAlertType.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public Iterable<LegacyGraphQLRouteAlertType> getLegacyGraphQLTypes() {
      return this.types;
    }

    public void setLegacyGraphQLTypes(Iterable<LegacyGraphQLRouteAlertType> types) {
      this.types = types;
    }
  }

  public static class LegacyGraphQLRouteLongNameArgs {

    private String language;

    public LegacyGraphQLRouteLongNameArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getLegacyGraphQLLanguage() {
      return this.language;
    }

    public void setLegacyGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  /** Entities that are relevant for routes that can contain alerts */
  public enum LegacyGraphQLRouteAlertType {
    AGENCY,
    PATTERNS,
    ROUTE,
    ROUTE_TYPE,
    STOPS_ON_ROUTE,
    STOPS_ON_TRIPS,
    TRIPS,
  }

  public enum LegacyGraphQLRoutingErrorCode {
    LOCATION_NOT_FOUND,
    NO_STOPS_IN_RANGE,
    NO_TRANSIT_CONNECTION,
    NO_TRANSIT_CONNECTION_IN_SEARCH_WINDOW,
    OUTSIDE_BOUNDS,
    OUTSIDE_SERVICE_PERIOD,
    SYSTEM_ERROR,
    WALKING_BETTER_THAN_TRANSIT,
  }

  public static class LegacyGraphQLStopAlertsArgs {

    private Iterable<LegacyGraphQLStopAlertType> types;

    public LegacyGraphQLStopAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("types") != null) {
          this.types =
            ((List<Object>) args.get("types")).stream()
              .map(item ->
                item instanceof LegacyGraphQLStopAlertType
                  ? item
                  : LegacyGraphQLStopAlertType.valueOf((String) item)
              )
              .map(LegacyGraphQLStopAlertType.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public Iterable<LegacyGraphQLStopAlertType> getLegacyGraphQLTypes() {
      return this.types;
    }

    public void setLegacyGraphQLTypes(Iterable<LegacyGraphQLStopAlertType> types) {
      this.types = types;
    }
  }

  public static class LegacyGraphQLStopDescArgs {

    private String language;

    public LegacyGraphQLStopDescArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getLegacyGraphQLLanguage() {
      return this.language;
    }

    public void setLegacyGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  public static class LegacyGraphQLStopNameArgs {

    private String language;

    public LegacyGraphQLStopNameArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getLegacyGraphQLLanguage() {
      return this.language;
    }

    public void setLegacyGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  public static class LegacyGraphQLStopStopTimesForPatternArgs {

    private String id;
    private Integer numberOfDepartures;
    private Boolean omitCanceled;
    private Boolean omitNonPickups;
    private Long startTime;
    private Integer timeRange;

    public LegacyGraphQLStopStopTimesForPatternArgs(Map<String, Object> args) {
      if (args != null) {
        this.id = (String) args.get("id");
        this.numberOfDepartures = (Integer) args.get("numberOfDepartures");
        this.omitCanceled = (Boolean) args.get("omitCanceled");
        this.omitNonPickups = (Boolean) args.get("omitNonPickups");
        this.startTime = (Long) args.get("startTime");
        this.timeRange = (Integer) args.get("timeRange");
      }
    }

    public String getLegacyGraphQLId() {
      return this.id;
    }

    public Integer getLegacyGraphQLNumberOfDepartures() {
      return this.numberOfDepartures;
    }

    public Boolean getLegacyGraphQLOmitCanceled() {
      return this.omitCanceled;
    }

    public Boolean getLegacyGraphQLOmitNonPickups() {
      return this.omitNonPickups;
    }

    public Long getLegacyGraphQLStartTime() {
      return this.startTime;
    }

    public Integer getLegacyGraphQLTimeRange() {
      return this.timeRange;
    }

    public void setLegacyGraphQLId(String id) {
      this.id = id;
    }

    public void setLegacyGraphQLNumberOfDepartures(Integer numberOfDepartures) {
      this.numberOfDepartures = numberOfDepartures;
    }

    public void setLegacyGraphQLOmitCanceled(Boolean omitCanceled) {
      this.omitCanceled = omitCanceled;
    }

    public void setLegacyGraphQLOmitNonPickups(Boolean omitNonPickups) {
      this.omitNonPickups = omitNonPickups;
    }

    public void setLegacyGraphQLStartTime(Long startTime) {
      this.startTime = startTime;
    }

    public void setLegacyGraphQLTimeRange(Integer timeRange) {
      this.timeRange = timeRange;
    }
  }

  public static class LegacyGraphQLStopStoptimesForPatternsArgs {

    private Integer numberOfDepartures;
    private Boolean omitCanceled;
    private Boolean omitNonPickups;
    private Long startTime;
    private Integer timeRange;

    public LegacyGraphQLStopStoptimesForPatternsArgs(Map<String, Object> args) {
      if (args != null) {
        this.numberOfDepartures = (Integer) args.get("numberOfDepartures");
        this.omitCanceled = (Boolean) args.get("omitCanceled");
        this.omitNonPickups = (Boolean) args.get("omitNonPickups");
        this.startTime = (Long) args.get("startTime");
        this.timeRange = (Integer) args.get("timeRange");
      }
    }

    public Integer getLegacyGraphQLNumberOfDepartures() {
      return this.numberOfDepartures;
    }

    public Boolean getLegacyGraphQLOmitCanceled() {
      return this.omitCanceled;
    }

    public Boolean getLegacyGraphQLOmitNonPickups() {
      return this.omitNonPickups;
    }

    public Long getLegacyGraphQLStartTime() {
      return this.startTime;
    }

    public Integer getLegacyGraphQLTimeRange() {
      return this.timeRange;
    }

    public void setLegacyGraphQLNumberOfDepartures(Integer numberOfDepartures) {
      this.numberOfDepartures = numberOfDepartures;
    }

    public void setLegacyGraphQLOmitCanceled(Boolean omitCanceled) {
      this.omitCanceled = omitCanceled;
    }

    public void setLegacyGraphQLOmitNonPickups(Boolean omitNonPickups) {
      this.omitNonPickups = omitNonPickups;
    }

    public void setLegacyGraphQLStartTime(Long startTime) {
      this.startTime = startTime;
    }

    public void setLegacyGraphQLTimeRange(Integer timeRange) {
      this.timeRange = timeRange;
    }
  }

  public static class LegacyGraphQLStopStoptimesForServiceDateArgs {

    private String date;
    private Boolean omitCanceled;
    private Boolean omitNonPickups;

    public LegacyGraphQLStopStoptimesForServiceDateArgs(Map<String, Object> args) {
      if (args != null) {
        this.date = (String) args.get("date");
        this.omitCanceled = (Boolean) args.get("omitCanceled");
        this.omitNonPickups = (Boolean) args.get("omitNonPickups");
      }
    }

    public String getLegacyGraphQLDate() {
      return this.date;
    }

    public Boolean getLegacyGraphQLOmitCanceled() {
      return this.omitCanceled;
    }

    public Boolean getLegacyGraphQLOmitNonPickups() {
      return this.omitNonPickups;
    }

    public void setLegacyGraphQLDate(String date) {
      this.date = date;
    }

    public void setLegacyGraphQLOmitCanceled(Boolean omitCanceled) {
      this.omitCanceled = omitCanceled;
    }

    public void setLegacyGraphQLOmitNonPickups(Boolean omitNonPickups) {
      this.omitNonPickups = omitNonPickups;
    }
  }

  public static class LegacyGraphQLStopStoptimesWithoutPatternsArgs {

    private Integer numberOfDepartures;
    private Boolean omitCanceled;
    private Boolean omitNonPickups;
    private Long startTime;
    private Integer timeRange;

    public LegacyGraphQLStopStoptimesWithoutPatternsArgs(Map<String, Object> args) {
      if (args != null) {
        this.numberOfDepartures = (Integer) args.get("numberOfDepartures");
        this.omitCanceled = (Boolean) args.get("omitCanceled");
        this.omitNonPickups = (Boolean) args.get("omitNonPickups");
        this.startTime = (Long) args.get("startTime");
        this.timeRange = (Integer) args.get("timeRange");
      }
    }

    public Integer getLegacyGraphQLNumberOfDepartures() {
      return this.numberOfDepartures;
    }

    public Boolean getLegacyGraphQLOmitCanceled() {
      return this.omitCanceled;
    }

    public Boolean getLegacyGraphQLOmitNonPickups() {
      return this.omitNonPickups;
    }

    public Long getLegacyGraphQLStartTime() {
      return this.startTime;
    }

    public Integer getLegacyGraphQLTimeRange() {
      return this.timeRange;
    }

    public void setLegacyGraphQLNumberOfDepartures(Integer numberOfDepartures) {
      this.numberOfDepartures = numberOfDepartures;
    }

    public void setLegacyGraphQLOmitCanceled(Boolean omitCanceled) {
      this.omitCanceled = omitCanceled;
    }

    public void setLegacyGraphQLOmitNonPickups(Boolean omitNonPickups) {
      this.omitNonPickups = omitNonPickups;
    }

    public void setLegacyGraphQLStartTime(Long startTime) {
      this.startTime = startTime;
    }

    public void setLegacyGraphQLTimeRange(Integer timeRange) {
      this.timeRange = timeRange;
    }
  }

  public static class LegacyGraphQLStopTransfersArgs {

    private Integer maxDistance;

    public LegacyGraphQLStopTransfersArgs(Map<String, Object> args) {
      if (args != null) {
        this.maxDistance = (Integer) args.get("maxDistance");
      }
    }

    public Integer getLegacyGraphQLMaxDistance() {
      return this.maxDistance;
    }

    public void setLegacyGraphQLMaxDistance(Integer maxDistance) {
      this.maxDistance = maxDistance;
    }
  }

  public static class LegacyGraphQLStopUrlArgs {

    private String language;

    public LegacyGraphQLStopUrlArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getLegacyGraphQLLanguage() {
      return this.language;
    }

    public void setLegacyGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  /** Entities, which are relevant for a stop and can contain alerts */
  public enum LegacyGraphQLStopAlertType {
    AGENCIES_OF_ROUTES,
    PATTERNS,
    ROUTES,
    STOP,
    STOP_ON_ROUTES,
    STOP_ON_TRIPS,
    TRIPS,
  }

  public static class LegacyGraphQLStoptimeHeadsignArgs {

    private String language;

    public LegacyGraphQLStoptimeHeadsignArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getLegacyGraphQLLanguage() {
      return this.language;
    }

    public void setLegacyGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  public enum LegacyGraphQLTransitMode {
    AIRPLANE,
    BUS,
    CABLE_CAR,
    CARPOOL,
    COACH,
    FERRY,
    FUNICULAR,
    GONDOLA,
    MONORAIL,
    RAIL,
    SUBWAY,
    TAXI,
    TRAM,
    TROLLEYBUS,
  }

  public static class LegacyGraphQLTransportModeInput {

    private LegacyGraphQLMode mode;
    private LegacyGraphQLQualifier qualifier;

    public LegacyGraphQLTransportModeInput(Map<String, Object> args) {
      if (args != null) {
        if (args.get("mode") instanceof LegacyGraphQLMode) {
          this.mode = (LegacyGraphQLMode) args.get("mode");
        } else {
          this.mode = LegacyGraphQLMode.valueOf((String) args.get("mode"));
        }
        if (args.get("qualifier") instanceof LegacyGraphQLQualifier) {
          this.qualifier = (LegacyGraphQLQualifier) args.get("qualifier");
        } else {
          this.qualifier = LegacyGraphQLQualifier.valueOf((String) args.get("qualifier"));
        }
      }
    }

    public LegacyGraphQLMode getLegacyGraphQLMode() {
      return this.mode;
    }

    public LegacyGraphQLQualifier getLegacyGraphQLQualifier() {
      return this.qualifier;
    }

    public void setLegacyGraphQLMode(LegacyGraphQLMode mode) {
      this.mode = mode;
    }

    public void setLegacyGraphQLQualifier(LegacyGraphQLQualifier qualifier) {
      this.qualifier = qualifier;
    }
  }

  public static class LegacyGraphQLTripAlertsArgs {

    private Iterable<LegacyGraphQLTripAlertType> types;

    public LegacyGraphQLTripAlertsArgs(Map<String, Object> args) {
      if (args != null) {
        if (args.get("types") != null) {
          this.types =
            ((List<Object>) args.get("types")).stream()
              .map(item ->
                item instanceof LegacyGraphQLTripAlertType
                  ? item
                  : LegacyGraphQLTripAlertType.valueOf((String) item)
              )
              .map(LegacyGraphQLTripAlertType.class::cast)
              .collect(Collectors.toList());
        }
      }
    }

    public Iterable<LegacyGraphQLTripAlertType> getLegacyGraphQLTypes() {
      return this.types;
    }

    public void setLegacyGraphQLTypes(Iterable<LegacyGraphQLTripAlertType> types) {
      this.types = types;
    }
  }

  public static class LegacyGraphQLTripArrivalStoptimeArgs {

    private String serviceDate;

    public LegacyGraphQLTripArrivalStoptimeArgs(Map<String, Object> args) {
      if (args != null) {
        this.serviceDate = (String) args.get("serviceDate");
      }
    }

    public String getLegacyGraphQLServiceDate() {
      return this.serviceDate;
    }

    public void setLegacyGraphQLServiceDate(String serviceDate) {
      this.serviceDate = serviceDate;
    }
  }

  public static class LegacyGraphQLTripDepartureStoptimeArgs {

    private String serviceDate;

    public LegacyGraphQLTripDepartureStoptimeArgs(Map<String, Object> args) {
      if (args != null) {
        this.serviceDate = (String) args.get("serviceDate");
      }
    }

    public String getLegacyGraphQLServiceDate() {
      return this.serviceDate;
    }

    public void setLegacyGraphQLServiceDate(String serviceDate) {
      this.serviceDate = serviceDate;
    }
  }

  public static class LegacyGraphQLTripStoptimesForDateArgs {

    private String serviceDate;

    public LegacyGraphQLTripStoptimesForDateArgs(Map<String, Object> args) {
      if (args != null) {
        this.serviceDate = (String) args.get("serviceDate");
      }
    }

    public String getLegacyGraphQLServiceDate() {
      return this.serviceDate;
    }

    public void setLegacyGraphQLServiceDate(String serviceDate) {
      this.serviceDate = serviceDate;
    }
  }

  public static class LegacyGraphQLTripTripHeadsignArgs {

    private String language;

    public LegacyGraphQLTripTripHeadsignArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getLegacyGraphQLLanguage() {
      return this.language;
    }

    public void setLegacyGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  /** Entities, which are relevant for a trip and can contain alerts */
  public enum LegacyGraphQLTripAlertType {
    AGENCY,
    PATTERN,
    ROUTE,
    ROUTE_TYPE,
    STOPS_ON_TRIP,
    TRIP,
  }

  public static class LegacyGraphQLVehicleParkingNameArgs {

    private String language;

    public LegacyGraphQLVehicleParkingNameArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getLegacyGraphQLLanguage() {
      return this.language;
    }

    public void setLegacyGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  public static class LegacyGraphQLVehicleParkingNoteArgs {

    private String language;

    public LegacyGraphQLVehicleParkingNoteArgs(Map<String, Object> args) {
      if (args != null) {
        this.language = (String) args.get("language");
      }
    }

    public String getLegacyGraphQLLanguage() {
      return this.language;
    }

    public void setLegacyGraphQLLanguage(String language) {
      this.language = language;
    }
  }

  /**
   * The state of the vehicle parking. TEMPORARILY_CLOSED and CLOSED are distinct states so that they
   * may be represented differently to the user.
   */
  public enum LegacyGraphQLVehicleParkingState {
    CLOSED,
    OPERATIONAL,
    TEMPORARILY_CLOSED,
  }

  /** How close the vehicle is to the stop. */
  public enum LegacyGraphQLVehicleStopStatus {
    INCOMING_AT,
    IN_TRANSIT_TO,
    STOPPED_AT,
  }

  public enum LegacyGraphQLVertexType {
    BIKEPARK,
    BIKESHARE,
    NORMAL,
    PARKANDRIDE,
    TRANSIT,
  }

  public enum LegacyGraphQLWheelchairBoarding {
    NOT_POSSIBLE,
    NO_INFORMATION,
    POSSIBLE,
  }
}
